{
    "pl.edu.wat.wcy.pz.restaurantServer.security.WebSecurityConfiguration": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.security.WebSecurityConfiguration",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.security",
        "begin": 1,
        "end": 70,
        "short_name": "WebSecurityConfiguration",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.security.WebSecurityConfiguration",
        "annotations": [
            "@Configuration",
            "@EnableWebSecurity",
            "@AllArgsConstructor",
            "@EnableGlobalMethodSecurity(prePostEnabled = true)"
        ],
        "dependencies": [
            "pl.edu.wat.wcy.pz.restaurantServer.security.service.UserDetailsServiceImpl"
        ],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "UserDetailsServiceImpl",
                "variable": "userDetailsService",
                "lineBegin": 29,
                "lineEnd": 29
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "JwtAuthEntryPoint",
                "variable": "unauthorizedHandler",
                "lineBegin": 31,
                "lineEnd": 31
            }
        ],
        "methods": {
            "passwordEncoder": {
                "name": "passwordEncoder",
                "lineBegin": 34,
                "lineEnd": 37,
                "annotations": [
                    "@Bean"
                ],
                "returnDataType": [
                    "PasswordEncoder"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return new BCryptPasswordEncoder();\n}",
                "methodInvocations": []
            },
            "authenticationManagerBean": {
                "name": "authenticationManagerBean",
                "lineBegin": 44,
                "lineEnd": 48,
                "annotations": [
                    "@Bean",
                    "@Override"
                ],
                "returnDataType": [
                    "AuthenticationManager"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return super.authenticationManagerBean();\n}",
                "methodInvocations": []
            },
            "authenticationJwtTokenFilter": {
                "name": "authenticationJwtTokenFilter",
                "lineBegin": 39,
                "lineEnd": 42,
                "annotations": [
                    "@Bean"
                ],
                "returnDataType": [
                    "JwtAuthTokenFilter"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return new JwtAuthTokenFilter();\n}",
                "methodInvocations": []
            },
            "configure": {
                "name": "configure",
                "lineBegin": 56,
                "lineEnd": 69,
                "annotations": [
                    "@Override"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "HttpSecurity",
                        "variable": "http",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    http.cors().and().csrf().disable().authorizeRequests().antMatchers(\"/auth/**\").permitAll().antMatchers(\"/dishes/**\").permitAll().anyRequest().authenticated().and().exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n    http.addFilterBefore(authenticationJwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);\n    http.headers().frameOptions().disable();\n}",
                "methodInvocations": []
            }
        },
        "implements": [],
        "extends": [
            "WebSecurityConfigurerAdapter"
        ],
        "imports": [
            "lombok.AllArgsConstructor",
            "org.springframework.context.annotation.Bean",
            "org.springframework.context.annotation.Configuration",
            "org.springframework.security.authentication.AuthenticationManager",
            "org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder",
            "org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity",
            "org.springframework.security.config.annotation.web.builders.HttpSecurity",
            "org.springframework.security.config.annotation.web.configuration.EnableWebSecurity",
            "org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter",
            "org.springframework.security.config.http.SessionCreationPolicy",
            "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
            "org.springframework.security.crypto.password.PasswordEncoder",
            "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
            "pl.edu.wat.wcy.pz.restaurantServer.security.jwt.JwtAuthEntryPoint",
            "pl.edu.wat.wcy.pz.restaurantServer.security.jwt.JwtAuthTokenFilter",
            "pl.edu.wat.wcy.pz.restaurantServer.security.service.UserDetailsServiceImpl"
        ],
        "methodsInvocations": [],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "passwordEncoder",
                "annotations": [
                    "@Bean"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "PasswordEncoder",
                "parameters": [],
                "body": [
                    "{",
                    "    return new BCryptPasswordEncoder();",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "authenticationManagerBean",
                "annotations": [
                    "@Bean",
                    "@Override"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "AuthenticationManager",
                "parameters": [],
                "body": [
                    "{",
                    "    return super.authenticationManagerBean();",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "authenticationJwtTokenFilter",
                "annotations": [
                    "@Bean"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "JwtAuthTokenFilter",
                "parameters": [],
                "body": [
                    "{",
                    "    return new JwtAuthTokenFilter();",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "configure",
                "annotations": [
                    "@Override"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "HttpSecurity",
                        "variable": "http",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    http.cors().and().csrf().disable().authorizeRequests().antMatchers(\"/auth/**\").permitAll().antMatchers(\"/dishes/**\").permitAll().anyRequest().authenticated().and().exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);",
                    "    http.addFilterBefore(authenticationJwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);",
                    "    http.headers().frameOptions().disable();",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.security.jwt.JwtAuthEntryPoint": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.security.jwt.JwtAuthEntryPoint",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.security.jwt",
        "begin": 1,
        "end": 23,
        "short_name": "JwtAuthEntryPoint",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.security.jwt.JwtAuthEntryPoint",
        "annotations": [
            "@Component"
        ],
        "dependencies": [],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "Logger",
                "variable": "LOGGER",
                "lineBegin": 16,
                "lineEnd": 16
            }
        ],
        "methods": {
            "commence": {
                "name": "commence",
                "lineBegin": 18,
                "lineEnd": 22,
                "annotations": [
                    "@Override"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "HttpServletRequest",
                        "variable": "httpServletRequest",
                        "qualifedType": ""
                    },
                    {
                        "type": "HttpServletResponse",
                        "variable": "httpServletResponse",
                        "qualifedType": ""
                    },
                    {
                        "type": "AuthenticationException",
                        "variable": "e",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    LOGGER.error(\"Invalid login data.\", e.getMessage());\n    httpServletResponse.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Invalid login data.\");\n}",
                "methodInvocations": []
            }
        },
        "implements": [
            "AuthenticationEntryPoint"
        ],
        "extends": [],
        "imports": [
            "org.slf4j.Logger",
            "org.slf4j.LoggerFactory",
            "org.springframework.security.core.AuthenticationException",
            "org.springframework.security.web.AuthenticationEntryPoint",
            "org.springframework.stereotype.Component",
            "javax.servlet.http.HttpServletRequest",
            "javax.servlet.http.HttpServletResponse",
            "java.io.IOException"
        ],
        "methodsInvocations": [],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "commence",
                "annotations": [
                    "@Override"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "HttpServletRequest",
                        "variable": "httpServletRequest",
                        "qualifedType": ""
                    },
                    {
                        "type": "HttpServletResponse",
                        "variable": "httpServletResponse",
                        "qualifedType": ""
                    },
                    {
                        "type": "AuthenticationException",
                        "variable": "e",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    LOGGER.error(\"Invalid login data.\", e.getMessage());",
                    "    httpServletResponse.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Invalid login data.\");",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.security.jwt.JwtAuthTokenFilter": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.security.jwt.JwtAuthTokenFilter",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.security.jwt",
        "begin": 1,
        "end": 57,
        "short_name": "JwtAuthTokenFilter",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.security.jwt.JwtAuthTokenFilter",
        "annotations": [
            "@NoArgsConstructor"
        ],
        "dependencies": [
            "pl.edu.wat.wcy.pz.restaurantServer.security.service.UserDetailsServiceImpl"
        ],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "Logger",
                "variable": "LOGGER",
                "lineBegin": 24,
                "lineEnd": 24
            },
            {
                "annotations": [
                    "@Autowired"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "JwtProvider",
                "variable": "jwtProvider",
                "lineBegin": 25,
                "lineEnd": 26
            },
            {
                "annotations": [
                    "@Autowired"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "UserDetailsServiceImpl",
                "variable": "userDetailsService",
                "lineBegin": 27,
                "lineEnd": 28
            }
        ],
        "methods": {
            "doFilterInternal": {
                "name": "doFilterInternal",
                "lineBegin": 30,
                "lineEnd": 47,
                "annotations": [
                    "@Override"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "HttpServletRequest",
                        "variable": "request",
                        "qualifedType": ""
                    },
                    {
                        "type": "HttpServletResponse",
                        "variable": "response",
                        "qualifedType": ""
                    },
                    {
                        "type": "FilterChain",
                        "variable": "filterChain",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "String",
                        "variable": "jwt",
                        "qualifedType": ""
                    },
                    {
                        "type": "String",
                        "variable": "username",
                        "qualifedType": ""
                    },
                    {
                        "type": "UserDetails",
                        "variable": "userDetails",
                        "qualifedType": ""
                    },
                    {
                        "type": "UsernamePasswordAuthenticationToken",
                        "variable": "authenticationToken",
                        "qualifedType": ""
                    }
                ],
                "body": "{\n    try {\n        String jwt = getJwtFromRequest(request);\n        if (jwt != null && jwtProvider.validateJwtToken(jwt)) {\n            String username = jwtProvider.getUsernameFromToken(jwt);\n            UserDetails userDetails = userDetailsService.loadUserByUsername(username);\n            UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());\n            authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\n            SecurityContextHolder.getContext().setAuthentication(authenticationToken);\n        }\n    } catch (Exception e) {\n        LOGGER.error(\"Error in user authentication\", e);\n    }\n    filterChain.doFilter(request, response);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "jwtProvider",
                        "methodName": "validateJwtToken",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.security.jwt.JwtProvider"
                    },
                    {
                        "scopeName": "jwtProvider",
                        "methodName": "getUsernameFromToken",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.security.jwt.JwtProvider"
                    },
                    {
                        "scopeName": "userDetailsService",
                        "methodName": "loadUserByUsername",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.security.service.UserDetailsServiceImpl"
                    },
                    {
                        "scopeName": "userDetails",
                        "methodName": "getAuthorities",
                        "targetClassName": ""
                    },
                    {
                        "scopeName": "authenticationToken",
                        "methodName": "setDetails",
                        "targetClassName": ""
                    }
                ]
            },
            "getJwtFromRequest": {
                "name": "getJwtFromRequest",
                "lineBegin": 49,
                "lineEnd": 56,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "HttpServletRequest",
                        "variable": "request",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "String",
                        "variable": "authorizationHeader",
                        "qualifedType": ""
                    }
                ],
                "body": "{\n    String authorizationHeader = request.getHeader(\"Authorization\");\n    if (authorizationHeader != null && authorizationHeader.startsWith(\"Bearer \"))\n        return authorizationHeader.replace(\"Bearer \", \"\");\n    return null;\n}",
                "methodInvocations": [
                    {
                        "scopeName": "authorizationHeader",
                        "methodName": "startsWith",
                        "targetClassName": ""
                    },
                    {
                        "scopeName": "authorizationHeader",
                        "methodName": "replace",
                        "targetClassName": ""
                    }
                ]
            }
        },
        "implements": [],
        "extends": [
            "OncePerRequestFilter"
        ],
        "imports": [
            "lombok.NoArgsConstructor",
            "org.slf4j.Logger",
            "org.slf4j.LoggerFactory",
            "org.springframework.beans.factory.annotation.Autowired",
            "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
            "org.springframework.security.core.context.SecurityContextHolder",
            "org.springframework.security.core.userdetails.UserDetails",
            "org.springframework.security.web.authentication.WebAuthenticationDetailsSource",
            "org.springframework.web.filter.OncePerRequestFilter",
            "pl.edu.wat.wcy.pz.restaurantServer.security.service.UserDetailsServiceImpl",
            "javax.servlet.FilterChain",
            "javax.servlet.ServletException",
            "javax.servlet.http.HttpServletRequest",
            "javax.servlet.http.HttpServletResponse",
            "java.io.IOException"
        ],
        "methodsInvocations": [
            {
                "scopeName": "jwtProvider",
                "methodName": "validateJwtToken",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.security.jwt.JwtProvider"
            },
            {
                "scopeName": "jwtProvider",
                "methodName": "getUsernameFromToken",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.security.jwt.JwtProvider"
            },
            {
                "scopeName": "userDetailsService",
                "methodName": "loadUserByUsername",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.security.service.UserDetailsServiceImpl"
            }
        ],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "doFilterInternal",
                "annotations": [
                    "@Override"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "HttpServletRequest",
                        "variable": "request",
                        "qualifedType": ""
                    },
                    {
                        "type": "HttpServletResponse",
                        "variable": "response",
                        "qualifedType": ""
                    },
                    {
                        "type": "FilterChain",
                        "variable": "filterChain",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    try {",
                    "        String jwt = getJwtFromRequest(request);",
                    "        if (jwt != null && jwtProvider.validateJwtToken(jwt)) {",
                    "            String username = jwtProvider.getUsernameFromToken(jwt);",
                    "            UserDetails userDetails = userDetailsService.loadUserByUsername(username);",
                    "            UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());",
                    "            authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));",
                    "            SecurityContextHolder.getContext().setAuthentication(authenticationToken);",
                    "        }",
                    "    } catch (Exception e) {",
                    "        LOGGER.error(\"Error in user authentication\", e);",
                    "    }",
                    "    filterChain.doFilter(request, response);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getJwtFromRequest",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [
                    {
                        "type": "HttpServletRequest",
                        "variable": "request",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    String authorizationHeader = request.getHeader(\"Authorization\");",
                    "    if (authorizationHeader != null && authorizationHeader.startsWith(\"Bearer \"))",
                    "        return authorizationHeader.replace(\"Bearer \", \"\");",
                    "    return null;",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.security.jwt.JwtProvider": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.security.jwt.JwtProvider",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.security.jwt",
        "begin": 1,
        "end": 56,
        "short_name": "JwtProvider",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.security.jwt.JwtProvider",
        "annotations": [
            "@Component"
        ],
        "dependencies": [
            "pl.edu.wat.wcy.pz.restaurantServer.security.service.UserPrinciple"
        ],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "Logger",
                "variable": "LOGGER",
                "lineBegin": 16,
                "lineEnd": 16
            },
            {
                "annotations": [
                    "@Value(\"${authentication.secret.value}\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "jwtSecret",
                "lineBegin": 18,
                "lineEnd": 19
            },
            {
                "annotations": [
                    "@Value(\"${authentication.secret.expiration}\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "int",
                "variable": "jwtExpiration",
                "lineBegin": 21,
                "lineEnd": 22
            }
        ],
        "methods": {
            "generateJwtToken": {
                "name": "generateJwtToken",
                "lineBegin": 24,
                "lineEnd": 33,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Authentication",
                        "variable": "authentication",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "UserPrinciple",
                        "variable": "principle",
                        "qualifedType": ""
                    }
                ],
                "body": "{\n    UserPrinciple principle = (UserPrinciple) authentication.getPrincipal();\n    return Jwts.builder().setSubject(principle.getUsername()).setIssuedAt(new Date()).setExpiration(new Date(new Date().getTime() + jwtExpiration * 1000)).signWith(SignatureAlgorithm.HS512, jwtSecret).compact();\n}",
                "methodInvocations": [
                    {
                        "scopeName": "principle",
                        "methodName": "getUsername",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.security.service.UserPrinciple"
                    }
                ]
            },
            "validateJwtToken": {
                "name": "validateJwtToken",
                "lineBegin": 35,
                "lineEnd": 51,
                "annotations": [],
                "returnDataType": [
                    "boolean"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "authToken",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    try {\n        Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(authToken);\n        return true;\n    } catch (SignatureException e) {\n        LOGGER.error(\"Signature validation fails.\", e);\n    } catch (MalformedJwtException e) {\n        LOGGER.error(\"Invalid token\", e);\n    } catch (ExpiredJwtException e) {\n        LOGGER.error(\"Expired token\", e);\n    } catch (UnsupportedJwtException e) {\n        LOGGER.error(\"Unsupported token\", e);\n    } catch (IllegalArgumentException e) {\n        LOGGER.error(\"Empty string\", e);\n    }\n    return false;\n}",
                "methodInvocations": []
            },
            "getUsernameFromToken": {
                "name": "getUsernameFromToken",
                "lineBegin": 53,
                "lineEnd": 55,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "authToken",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    return Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(authToken).getBody().getSubject();\n}",
                "methodInvocations": []
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "io.jsonwebtoken",
            "org.slf4j.Logger",
            "org.slf4j.LoggerFactory",
            "org.springframework.beans.factory.annotation.Value",
            "org.springframework.security.core.Authentication",
            "org.springframework.stereotype.Component",
            "pl.edu.wat.wcy.pz.restaurantServer.security.service.UserPrinciple",
            "java.util.Date"
        ],
        "methodsInvocations": [
            {
                "scopeName": "principle",
                "methodName": "getUsername",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.security.service.UserPrinciple"
            }
        ],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "generateJwtToken",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [
                    {
                        "type": "Authentication",
                        "variable": "authentication",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    UserPrinciple principle = (UserPrinciple) authentication.getPrincipal();",
                    "    return Jwts.builder().setSubject(principle.getUsername()).setIssuedAt(new Date()).setExpiration(new Date(new Date().getTime() + jwtExpiration * 1000)).signWith(SignatureAlgorithm.HS512, jwtSecret).compact();",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "validateJwtToken",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "boolean",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "authToken",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    try {",
                    "        Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(authToken);",
                    "        return true;",
                    "    } catch (SignatureException e) {",
                    "        LOGGER.error(\"Signature validation fails.\", e);",
                    "    } catch (MalformedJwtException e) {",
                    "        LOGGER.error(\"Invalid token\", e);",
                    "    } catch (ExpiredJwtException e) {",
                    "        LOGGER.error(\"Expired token\", e);",
                    "    } catch (UnsupportedJwtException e) {",
                    "        LOGGER.error(\"Unsupported token\", e);",
                    "    } catch (IllegalArgumentException e) {",
                    "        LOGGER.error(\"Empty string\", e);",
                    "    }",
                    "    return false;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getUsernameFromToken",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "authToken",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    return Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(authToken).getBody().getSubject();",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.security.service.UserDetailsServiceImpl": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.security.service.UserDetailsServiceImpl",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.security.service",
        "begin": 1,
        "end": 22,
        "short_name": "UserDetailsServiceImpl",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.security.service.UserDetailsServiceImpl",
        "annotations": [
            "@Service",
            "@AllArgsConstructor"
        ],
        "dependencies": [],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "UserRepository",
                "variable": "userRepository",
                "lineBegin": 15,
                "lineEnd": 15
            }
        ],
        "methods": {
            "loadUserByUsername": {
                "name": "loadUserByUsername",
                "lineBegin": 17,
                "lineEnd": 21,
                "annotations": [
                    "@Override"
                ],
                "returnDataType": [
                    "UserDetails"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "s",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "User",
                        "variable": "user",
                        "qualifedType": ""
                    }
                ],
                "body": "{\n    User user = userRepository.findByMail(s).orElseThrow(() -> new UsernameNotFoundException(\"User with mail \" + s + \" not found.\"));\n    return UserPrinciple.build(user);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "userRepository",
                        "methodName": "findByMail",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
                    },
                    {
                        "scopeName": "UserPrinciple",
                        "methodName": "build",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.security.service.UserPrinciple"
                    }
                ]
            }
        },
        "implements": [
            "UserDetailsService"
        ],
        "extends": [],
        "imports": [
            "lombok.AllArgsConstructor",
            "org.springframework.security.core.userdetails.UserDetails",
            "org.springframework.security.core.userdetails.UserDetailsService",
            "org.springframework.security.core.userdetails.UsernameNotFoundException",
            "org.springframework.stereotype.Service",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.User",
            "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
        ],
        "methodsInvocations": [
            {
                "scopeName": "userRepository",
                "methodName": "findByMail",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
            },
            {
                "scopeName": "UserPrinciple",
                "methodName": "build",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.security.service.UserPrinciple"
            }
        ],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "loadUserByUsername",
                "annotations": [
                    "@Override"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "UserDetails",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "s",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    User user = userRepository.findByMail(s).orElseThrow(() -> new UsernameNotFoundException(\"User with mail \" + s + \" not found.\"));",
                    "    return UserPrinciple.build(user);",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.repository",
        "begin": 1,
        "end": 17,
        "short_name": "UserRepository",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository",
        "annotations": [
            "@Transactional",
            "@Repository"
        ],
        "dependencies": [],
        "instance_variables": [],
        "methods": {
            "existsByMail": {
                "name": "existsByMail",
                "lineBegin": 13,
                "lineEnd": 13,
                "annotations": [],
                "returnDataType": [
                    "Boolean"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "mail",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "",
                "methodInvocations": []
            },
            "findByMail": {
                "name": "findByMail",
                "lineBegin": 15,
                "lineEnd": 15,
                "annotations": [],
                "returnDataType": [
                    "Optional<User>"
                ],
                "identifier": [
                    "Optional",
                    "User"
                ],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "mail",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "",
                "methodInvocations": []
            }
        },
        "implements": [],
        "extends": [
            "JpaRepository<User, Long>"
        ],
        "imports": [
            "org.springframework.data.jpa.repository.JpaRepository",
            "org.springframework.stereotype.Repository",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.User",
            "javax.transaction.Transactional",
            "java.util.Optional"
        ],
        "methodsInvocations": [],
        "isInterface": true,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "existsByMail",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Boolean",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "mail",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    ""
                ],
                "exceptions": []
            },
            {
                "name": "findByMail",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Optional<User>",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "mail",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    ""
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.entity.User": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.entity.User",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.entity",
        "begin": 1,
        "end": 106,
        "short_name": "User",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.entity.User",
        "annotations": [
            "@AllArgsConstructor",
            "@NoArgsConstructor",
            "@Entity",
            "@Builder"
        ],
        "dependencies": [
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Role",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
        ],
        "instance_variables": [
            {
                "annotations": [
                    "@Id",
                    "@GeneratedValue(strategy = GenerationType.IDENTITY)",
                    "@Column(name = \"USER_ID\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "Long",
                "variable": "userId",
                "lineBegin": 17,
                "lineEnd": 20
            },
            {
                "annotations": [
                    "@NaturalId",
                    "@Column(name = \"MAIL\", length = 50)"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "mail",
                "lineBegin": 21,
                "lineEnd": 23
            },
            {
                "annotations": [
                    "@Column(name = \"FIRST_NAME\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "firstName",
                "lineBegin": 24,
                "lineEnd": 25
            },
            {
                "annotations": [
                    "@Column(name = \"LAST_NAME\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "lastName",
                "lineBegin": 26,
                "lineEnd": 27
            },
            {
                "annotations": [
                    "@Column(name = \"PASSWORD\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "password",
                "lineBegin": 28,
                "lineEnd": 29
            },
            {
                "annotations": [
                    "@ManyToMany(fetch = FetchType.EAGER)",
                    "@JoinTable(name = \"USER_ROLES\", joinColumns = @JoinColumn(name = \"USER_ID\"), inverseJoinColumns = @JoinColumn(name = \"ROLE_ID\"))"
                ],
                "modifier": "private ",
                "identifier": [
                    "Set",
                    "Role"
                ],
                "type": "Set<Role>",
                "variable": "roles",
                "lineBegin": 31,
                "lineEnd": 35
            },
            {
                "annotations": [
                    "@OneToMany(orphanRemoval = true, cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = \"userId\")"
                ],
                "modifier": "private ",
                "identifier": [
                    "List",
                    "Reservation"
                ],
                "type": "List<Reservation>",
                "variable": "reservations",
                "lineBegin": 37,
                "lineEnd": 38
            }
        ],
        "methods": {
            "setPassword": {
                "name": "setPassword",
                "lineBegin": 85,
                "lineEnd": 87,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "password",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.password = password;\n}",
                "methodInvocations": []
            },
            "setReservations": {
                "name": "setReservations",
                "lineBegin": 101,
                "lineEnd": 103,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "List<Reservation>",
                        "variable": "reservations",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.reservations = reservations;\n}",
                "methodInvocations": []
            },
            "getLastName": {
                "name": "getLastName",
                "lineBegin": 73,
                "lineEnd": 75,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return lastName;\n}",
                "methodInvocations": []
            },
            "getMail": {
                "name": "getMail",
                "lineBegin": 57,
                "lineEnd": 59,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return mail;\n}",
                "methodInvocations": []
            },
            "setLastName": {
                "name": "setLastName",
                "lineBegin": 77,
                "lineEnd": 79,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "lastName",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.lastName = lastName;\n}",
                "methodInvocations": []
            },
            "getPassword": {
                "name": "getPassword",
                "lineBegin": 81,
                "lineEnd": 83,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return password;\n}",
                "methodInvocations": []
            },
            "setMail": {
                "name": "setMail",
                "lineBegin": 61,
                "lineEnd": 63,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "mail",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.mail = mail;\n}",
                "methodInvocations": []
            },
            "setFirstName": {
                "name": "setFirstName",
                "lineBegin": 69,
                "lineEnd": 71,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "firstName",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.firstName = firstName;\n}",
                "methodInvocations": []
            },
            "getReservations": {
                "name": "getReservations",
                "lineBegin": 97,
                "lineEnd": 99,
                "annotations": [],
                "returnDataType": [
                    "List<Reservation>"
                ],
                "identifier": [
                    "List",
                    "Reservation"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return reservations;\n}",
                "methodInvocations": []
            },
            "getFirstName": {
                "name": "getFirstName",
                "lineBegin": 65,
                "lineEnd": 67,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return firstName;\n}",
                "methodInvocations": []
            },
            "setRoles": {
                "name": "setRoles",
                "lineBegin": 93,
                "lineEnd": 95,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Set<Role>",
                        "variable": "roles",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.roles = roles;\n}",
                "methodInvocations": []
            },
            "getUserId": {
                "name": "getUserId",
                "lineBegin": 49,
                "lineEnd": 51,
                "annotations": [],
                "returnDataType": [
                    "Long"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return userId;\n}",
                "methodInvocations": []
            },
            "setUserId": {
                "name": "setUserId",
                "lineBegin": 53,
                "lineEnd": 55,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "userId",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.userId = userId;\n}",
                "methodInvocations": []
            },
            "getRoles": {
                "name": "getRoles",
                "lineBegin": 89,
                "lineEnd": 91,
                "annotations": [],
                "returnDataType": [
                    "Set<Role>"
                ],
                "identifier": [
                    "Set",
                    "Role"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return roles;\n}",
                "methodInvocations": []
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.AllArgsConstructor",
            "lombok.Builder",
            "lombok.NoArgsConstructor",
            "org.hibernate.annotations.NaturalId",
            "javax.persistence",
            "java.util.List",
            "java.util.Set"
        ],
        "methodsInvocations": [],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "setPassword",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "password",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.password = password;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setReservations",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "List<Reservation>",
                        "variable": "reservations",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.reservations = reservations;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getLastName",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return lastName;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getMail",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return mail;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setLastName",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "lastName",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.lastName = lastName;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getPassword",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return password;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setMail",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "mail",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.mail = mail;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setFirstName",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "firstName",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.firstName = firstName;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getReservations",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "List<Reservation>",
                "parameters": [],
                "body": [
                    "{",
                    "    return reservations;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getFirstName",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return firstName;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setRoles",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Set<Role>",
                        "variable": "roles",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.roles = roles;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getUserId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Long",
                "parameters": [],
                "body": [
                    "{",
                    "    return userId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setUserId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "userId",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.userId = userId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getRoles",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Set<Role>",
                "parameters": [],
                "body": [
                    "{",
                    "    return roles;",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.security.service.UserPrinciple": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.security.service.UserPrinciple",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.security.service",
        "begin": 1,
        "end": 91,
        "short_name": "UserPrinciple",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.security.service.UserPrinciple",
        "annotations": [
            "@AllArgsConstructor",
            "@Getter"
        ],
        "dependencies": [],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "long",
                "variable": "serialVersionUID",
                "lineBegin": 19,
                "lineEnd": 19
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "Long",
                "variable": "id",
                "lineBegin": 21,
                "lineEnd": 21
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "username",
                "lineBegin": 22,
                "lineEnd": 22
            },
            {
                "annotations": [
                    "@JsonIgnore"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "password",
                "lineBegin": 23,
                "lineEnd": 24
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [
                    "Collection",
                    "? extends GrantedAuthority"
                ],
                "type": "Collection<? extends GrantedAuthority>",
                "variable": "authorities",
                "lineBegin": 25,
                "lineEnd": 25
            }
        ],
        "methods": {
            "getPassword": {
                "name": "getPassword",
                "lineBegin": 49,
                "lineEnd": 52,
                "annotations": [
                    "@Override"
                ],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return password;\n}",
                "methodInvocations": []
            },
            "build": {
                "name": "build",
                "lineBegin": 34,
                "lineEnd": 42,
                "annotations": [],
                "returnDataType": [
                    "UserPrinciple"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "User",
                        "variable": "user",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    List<GrantedAuthority> grantedAuthorities = user.getRoles().stream().map(role -> new SimpleGrantedAuthority(role.getRoleName())).collect(Collectors.toList());\n    return new UserPrinciple(user.getUserId(), user.getMail(), user.getPassword(), grantedAuthorities);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "user",
                        "methodName": "getRoles",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "user.getRoles()",
                        "methodName": "stream",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "user.getRoles().stream()",
                        "methodName": "map",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "user",
                        "methodName": "getUserId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "user",
                        "methodName": "getMail",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "user",
                        "methodName": "getPassword",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    }
                ]
            },
            "isAccountNonExpired": {
                "name": "isAccountNonExpired",
                "lineBegin": 59,
                "lineEnd": 62,
                "annotations": [
                    "@Override"
                ],
                "returnDataType": [
                    "boolean"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return true;\n}",
                "methodInvocations": []
            },
            "isCredentialsNonExpired": {
                "name": "isCredentialsNonExpired",
                "lineBegin": 69,
                "lineEnd": 72,
                "annotations": [
                    "@Override"
                ],
                "returnDataType": [
                    "boolean"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return true;\n}",
                "methodInvocations": []
            },
            "isEnabled": {
                "name": "isEnabled",
                "lineBegin": 74,
                "lineEnd": 77,
                "annotations": [
                    "@Override"
                ],
                "returnDataType": [
                    "boolean"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return true;\n}",
                "methodInvocations": []
            },
            "equals": {
                "name": "equals",
                "lineBegin": 79,
                "lineEnd": 90,
                "annotations": [
                    "@Override"
                ],
                "returnDataType": [
                    "boolean"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Object",
                        "variable": "o",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "UserPrinciple",
                        "variable": "user",
                        "qualifedType": ""
                    }
                ],
                "body": "{\n    if (this == o)\n        return true;\n    if (o == null)\n        return false;\n    if (getClass() != o.getClass())\n        return false;\n    UserPrinciple user = (UserPrinciple) o;\n    return Objects.equals(id, user.id);\n}",
                "methodInvocations": []
            },
            "isAccountNonLocked": {
                "name": "isAccountNonLocked",
                "lineBegin": 64,
                "lineEnd": 67,
                "annotations": [
                    "@Override"
                ],
                "returnDataType": [
                    "boolean"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return true;\n}",
                "methodInvocations": []
            },
            "getAuthorities": {
                "name": "getAuthorities",
                "lineBegin": 44,
                "lineEnd": 47,
                "annotations": [
                    "@Override"
                ],
                "returnDataType": [
                    "Collection<? extends GrantedAuthority>"
                ],
                "identifier": [
                    "Collection",
                    "? extends GrantedAuthority"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return authorities;\n}",
                "methodInvocations": []
            },
            "getUsername": {
                "name": "getUsername",
                "lineBegin": 54,
                "lineEnd": 57,
                "annotations": [
                    "@Override"
                ],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return username;\n}",
                "methodInvocations": []
            }
        },
        "implements": [
            "UserDetails"
        ],
        "extends": [],
        "imports": [
            "com.fasterxml.jackson.annotation.JsonIgnore",
            "lombok.AllArgsConstructor",
            "lombok.Getter",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.authority.SimpleGrantedAuthority",
            "org.springframework.security.core.userdetails.UserDetails",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.User",
            "java.util.Collection",
            "java.util.List",
            "java.util.Objects",
            "java.util.stream.Collectors"
        ],
        "methodsInvocations": [
            {
                "scopeName": "user",
                "methodName": "getRoles",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "user.getRoles()",
                "methodName": "stream",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "user.getRoles().stream()",
                "methodName": "map",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "user",
                "methodName": "getUserId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "user",
                "methodName": "getMail",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "user",
                "methodName": "getPassword",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            }
        ],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "getPassword",
                "annotations": [
                    "@Override"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return password;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "build",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "UserPrinciple",
                "parameters": [
                    {
                        "type": "User",
                        "variable": "user",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    List<GrantedAuthority> grantedAuthorities = user.getRoles().stream().map(role -> new SimpleGrantedAuthority(role.getRoleName())).collect(Collectors.toList());",
                    "    return new UserPrinciple(user.getUserId(), user.getMail(), user.getPassword(), grantedAuthorities);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "isAccountNonExpired",
                "annotations": [
                    "@Override"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "boolean",
                "parameters": [],
                "body": [
                    "{",
                    "    return true;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "isCredentialsNonExpired",
                "annotations": [
                    "@Override"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "boolean",
                "parameters": [],
                "body": [
                    "{",
                    "    return true;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "isEnabled",
                "annotations": [
                    "@Override"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "boolean",
                "parameters": [],
                "body": [
                    "{",
                    "    return true;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "equals",
                "annotations": [
                    "@Override"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "boolean",
                "parameters": [
                    {
                        "type": "Object",
                        "variable": "o",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    if (this == o)",
                    "        return true;",
                    "    if (o == null)",
                    "        return false;",
                    "    if (getClass() != o.getClass())",
                    "        return false;",
                    "    UserPrinciple user = (UserPrinciple) o;",
                    "    return Objects.equals(id, user.id);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "isAccountNonLocked",
                "annotations": [
                    "@Override"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "boolean",
                "parameters": [],
                "body": [
                    "{",
                    "    return true;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getAuthorities",
                "annotations": [
                    "@Override"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "Collection<? extends GrantedAuthority>",
                "parameters": [],
                "body": [
                    "{",
                    "    return authorities;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getUsername",
                "annotations": [
                    "@Override"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return username;",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.service.UserService": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.service.UserService",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.service",
        "begin": 1,
        "end": 76,
        "short_name": "UserService",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.service.UserService",
        "annotations": [
            "@AllArgsConstructor",
            "@Service"
        ],
        "dependencies": [
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
        ],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "UserRepository",
                "variable": "userRepository",
                "lineBegin": 19,
                "lineEnd": 19
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "PasswordEncoder",
                "variable": "encoder",
                "lineBegin": 20,
                "lineEnd": 20
            }
        ],
        "methods": {
            "getUserById": {
                "name": "getUserById",
                "lineBegin": 26,
                "lineEnd": 34,
                "annotations": [],
                "returnDataType": [
                    "Optional<User>"
                ],
                "identifier": [
                    "Optional",
                    "User"
                ],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<User>",
                        "variable": "user",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    }
                ],
                "body": "{\n    Optional<User> user = userRepository.findById(id);\n    if (user.isPresent()) {\n        return user;\n    } else {\n        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"User not found.\");\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "userRepository",
                        "methodName": "findById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
                    },
                    {
                        "scopeName": "user",
                        "methodName": "isPresent",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    }
                ]
            },
            "getUserReservations": {
                "name": "getUserReservations",
                "lineBegin": 71,
                "lineEnd": 74,
                "annotations": [],
                "returnDataType": [
                    "List<Reservation>"
                ],
                "identifier": [
                    "List",
                    "Reservation"
                ],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<User>",
                        "variable": "user",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    }
                ],
                "body": "{\n    Optional<User> user = getUserById(id);\n    return user.get().getReservations();\n}",
                "methodInvocations": [
                    {
                        "scopeName": "user",
                        "methodName": "get",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "user.get()",
                        "methodName": "getReservations",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    }
                ]
            },
            "getUsers": {
                "name": "getUsers",
                "lineBegin": 22,
                "lineEnd": 24,
                "annotations": [],
                "returnDataType": [
                    "List<User>"
                ],
                "identifier": [
                    "List",
                    "User"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return userRepository.findAll();\n}",
                "methodInvocations": [
                    {
                        "scopeName": "userRepository",
                        "methodName": "findAll",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
                    }
                ]
            },
            "addUser": {
                "name": "addUser",
                "lineBegin": 36,
                "lineEnd": 47,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "User",
                        "variable": "user",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "List<User>",
                        "variable": "userList",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "type": "String",
                        "variable": "password",
                        "qualifedType": ""
                    }
                ],
                "body": "{\n    List<User> userList = userRepository.findAll();\n    if (userList.stream().map(User::getMail).anyMatch(user.getMail()::equals)) {\n        throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"User with this email already exists.\");\n    } else {\n        String password = encoder.encode(user.getPassword());\n        user.setPassword(password);\n        userRepository.save(user);\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "userRepository",
                        "methodName": "findAll",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
                    },
                    {
                        "scopeName": "user",
                        "methodName": "getMail",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "userList",
                        "methodName": "stream",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "userList.stream()",
                        "methodName": "map",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "user",
                        "methodName": "getPassword",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "user",
                        "methodName": "setPassword",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "userRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
                    }
                ]
            },
            "updateUser": {
                "name": "updateUser",
                "lineBegin": 49,
                "lineEnd": 60,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "User",
                        "variable": "user",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<User>",
                        "variable": "oldUser",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    }
                ],
                "body": "{\n    Optional<User> oldUser = userRepository.findById(id);\n    if (!oldUser.isPresent())\n        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"User not found.\");\n    else {\n        user.setUserId(id);\n        userRepository.save(user);\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "userRepository",
                        "methodName": "findById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
                    },
                    {
                        "scopeName": "oldUser",
                        "methodName": "isPresent",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "user",
                        "methodName": "setUserId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "userRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
                    }
                ]
            },
            "deleteUserById": {
                "name": "deleteUserById",
                "lineBegin": 62,
                "lineEnd": 69,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    if (userRepository.findById(id).isPresent()) {\n        userRepository.deleteById(id);\n    } else {\n        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"User not found.\");\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "userRepository",
                        "methodName": "findById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
                    },
                    {
                        "scopeName": "userRepository",
                        "methodName": "deleteById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
                    }
                ]
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.AllArgsConstructor",
            "org.springframework.http.HttpStatus",
            "org.springframework.security.crypto.password.PasswordEncoder",
            "org.springframework.stereotype.Service",
            "org.springframework.web.server.ResponseStatusException",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.User",
            "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository",
            "java.util.List",
            "java.util.Optional"
        ],
        "methodsInvocations": [
            {
                "scopeName": "userRepository",
                "methodName": "findAll",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
            },
            {
                "scopeName": "userRepository",
                "methodName": "findById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
            },
            {
                "scopeName": "userRepository",
                "methodName": "findAll",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
            },
            {
                "scopeName": "user",
                "methodName": "getMail",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "user",
                "methodName": "getPassword",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "user",
                "methodName": "setPassword",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "userRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
            },
            {
                "scopeName": "userRepository",
                "methodName": "findById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
            },
            {
                "scopeName": "user",
                "methodName": "setUserId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "userRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
            },
            {
                "scopeName": "userRepository",
                "methodName": "findById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
            },
            {
                "scopeName": "userRepository",
                "methodName": "deleteById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
            }
        ],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "getUserById",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Optional<User>",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<User> user = userRepository.findById(id);",
                    "    if (user.isPresent()) {",
                    "        return user;",
                    "    } else {",
                    "        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"User not found.\");",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getUserReservations",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "List<Reservation>",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<User> user = getUserById(id);",
                    "    return user.get().getReservations();",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getUsers",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "List<User>",
                "parameters": [],
                "body": [
                    "{",
                    "    return userRepository.findAll();",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "addUser",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "User",
                        "variable": "user",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    List<User> userList = userRepository.findAll();",
                    "    if (userList.stream().map(User::getMail).anyMatch(user.getMail()::equals)) {",
                    "        throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"User with this email already exists.\");",
                    "    } else {",
                    "        String password = encoder.encode(user.getPassword());",
                    "        user.setPassword(password);",
                    "        userRepository.save(user);",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "updateUser",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "User",
                        "variable": "user",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<User> oldUser = userRepository.findById(id);",
                    "    if (!oldUser.isPresent())",
                    "        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"User not found.\");",
                    "    else {",
                    "        user.setUserId(id);",
                    "        userRepository.save(user);",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "deleteUserById",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    if (userRepository.findById(id).isPresent()) {",
                    "        userRepository.deleteById(id);",
                    "    } else {",
                    "        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"User not found.\");",
                    "    }",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.controller.UserController": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.controller.UserController",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.controller",
        "begin": 1,
        "end": 59,
        "short_name": "UserController",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.controller.UserController",
        "annotations": [
            "@AllArgsConstructor",
            "@RestController",
            "@CrossOrigin"
        ],
        "dependencies": [
            "pl.edu.wat.wcy.pz.restaurantServer.email.MailService",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
        ],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "UserService",
                "variable": "userService",
                "lineBegin": 18,
                "lineEnd": 18
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "MailService",
                "variable": "mailService",
                "lineBegin": 19,
                "lineEnd": 19
            }
        ],
        "methods": {
            "getUserById": {
                "name": "getUserById",
                "lineBegin": 28,
                "lineEnd": 32,
                "annotations": [
                    "@GetMapping(value = \"/users/{id}\")"
                ],
                "returnDataType": [
                    "User"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<User>",
                        "variable": "user",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    }
                ],
                "body": "{\n    Optional<User> user = userService.getUserById(id);\n    return user.orElse(null);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "userService",
                        "methodName": "getUserById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.UserService"
                    },
                    {
                        "scopeName": "user",
                        "methodName": "orElse",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    }
                ]
            },
            "getUserReservations": {
                "name": "getUserReservations",
                "lineBegin": 34,
                "lineEnd": 37,
                "annotations": [
                    "@GetMapping(value = \"/users/{id}/reservations\")"
                ],
                "returnDataType": [
                    "Collection<Reservation>"
                ],
                "identifier": [
                    "Collection",
                    "Reservation"
                ],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    return userService.getUserReservations(id);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "userService",
                        "methodName": "getUserReservations",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.UserService"
                    }
                ]
            },
            "getUsers": {
                "name": "getUsers",
                "lineBegin": 22,
                "lineEnd": 25,
                "annotations": [
                    "@GetMapping(\"/users\")"
                ],
                "returnDataType": [
                    "Collection<User>"
                ],
                "identifier": [
                    "Collection",
                    "User"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return userService.getUsers();\n}",
                "methodInvocations": [
                    {
                        "scopeName": "userService",
                        "methodName": "getUsers",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.UserService"
                    }
                ]
            },
            "addUser": {
                "name": "addUser",
                "lineBegin": 39,
                "lineEnd": 43,
                "annotations": [
                    "@PostMapping(\"/users\")"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "User",
                        "variable": "user",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    userService.addUser(user);\n    mailService.sendEmail(user.getMail(), \"Welcome to Restaurant!\", \"Hello \" + user.getFirstName() + \", thanks for using our system!\");\n}",
                "methodInvocations": [
                    {
                        "scopeName": "userService",
                        "methodName": "addUser",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.UserService"
                    },
                    {
                        "scopeName": "user",
                        "methodName": "getMail",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "user",
                        "methodName": "getFirstName",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "mailService",
                        "methodName": "sendEmail",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.email.MailService"
                    }
                ]
            },
            "deleteUser": {
                "name": "deleteUser",
                "lineBegin": 51,
                "lineEnd": 55,
                "annotations": [
                    "@DeleteMapping(\"/users/{id}\")"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<User>",
                        "variable": "user",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    }
                ],
                "body": "{\n    Optional<User> user = userService.getUserById(id);\n    userService.deleteUserById(id);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "userService",
                        "methodName": "getUserById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.UserService"
                    },
                    {
                        "scopeName": "userService",
                        "methodName": "deleteUserById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.UserService"
                    }
                ]
            },
            "updateUser": {
                "name": "updateUser",
                "lineBegin": 45,
                "lineEnd": 49,
                "annotations": [
                    "@PutMapping(\"/users/{id}\")"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "User",
                        "variable": "user",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    userService.updateUser(id, user);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "userService",
                        "methodName": "updateUser",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.UserService"
                    }
                ]
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.AllArgsConstructor",
            "org.springframework.web.bind.annotation",
            "pl.edu.wat.wcy.pz.restaurantServer.email.MailService",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.User",
            "pl.edu.wat.wcy.pz.restaurantServer.service.UserService",
            "java.util.Collection",
            "java.util.Optional"
        ],
        "methodsInvocations": [
            {
                "scopeName": "userService",
                "methodName": "getUsers",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.UserService"
            },
            {
                "scopeName": "userService",
                "methodName": "getUserById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.UserService"
            },
            {
                "scopeName": "userService",
                "methodName": "getUserReservations",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.UserService"
            },
            {
                "scopeName": "userService",
                "methodName": "addUser",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.UserService"
            },
            {
                "scopeName": "user",
                "methodName": "getMail",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "user",
                "methodName": "getFirstName",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "mailService",
                "methodName": "sendEmail",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.email.MailService"
            },
            {
                "scopeName": "userService",
                "methodName": "updateUser",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.UserService"
            },
            {
                "scopeName": "userService",
                "methodName": "getUserById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.UserService"
            },
            {
                "scopeName": "userService",
                "methodName": "deleteUserById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.UserService"
            }
        ],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "getUserById",
                "annotations": [
                    "@GetMapping(value = \"/users/{id}\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "User",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<User> user = userService.getUserById(id);",
                    "    return user.orElse(null);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getUserReservations",
                "annotations": [
                    "@GetMapping(value = \"/users/{id}/reservations\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "Collection<Reservation>",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    return userService.getUserReservations(id);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getUsers",
                "annotations": [
                    "@GetMapping(\"/users\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "Collection<User>",
                "parameters": [],
                "body": [
                    "{",
                    "    return userService.getUsers();",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "addUser",
                "annotations": [
                    "@PostMapping(\"/users\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "User",
                        "variable": "user",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    userService.addUser(user);",
                    "    mailService.sendEmail(user.getMail(), \"Welcome to Restaurant!\", \"Hello \" + user.getFirstName() + \", thanks for using our system!\");",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "deleteUser",
                "annotations": [
                    "@DeleteMapping(\"/users/{id}\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<User> user = userService.getUserById(id);",
                    "    userService.deleteUserById(id);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "updateUser",
                "annotations": [
                    "@PutMapping(\"/users/{id}\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "User",
                        "variable": "user",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    userService.updateUser(id, user);",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.entity",
        "begin": 1,
        "end": 84,
        "short_name": "Bill",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill",
        "annotations": [
            "@AllArgsConstructor",
            "@NoArgsConstructor",
            "@Entity",
            "@Builder"
        ],
        "dependencies": [],
        "instance_variables": [
            {
                "annotations": [
                    "@Id",
                    "@GeneratedValue(strategy = GenerationType.IDENTITY)",
                    "@Column(name = \"BILL_ID\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "Long",
                "variable": "billId",
                "lineBegin": 17,
                "lineEnd": 20
            },
            {
                "annotations": [
                    "@Column(name = \"STATUS\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "status",
                "lineBegin": 21,
                "lineEnd": 22
            },
            {
                "annotations": [
                    "@Column(name = \"CREATION_DATE\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "Date",
                "variable": "creationDate",
                "lineBegin": 23,
                "lineEnd": 24
            },
            {
                "annotations": [
                    "@Column(name = \"RTABLE_ID\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "Long",
                "variable": "rTableId",
                "lineBegin": 25,
                "lineEnd": 26
            },
            {
                "annotations": [
                    "@Column(name = \"VALUE\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "double",
                "variable": "value",
                "lineBegin": 27,
                "lineEnd": 28
            },
            {
                "annotations": [
                    "@OneToMany(orphanRemoval = true, cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = \"billId\")"
                ],
                "modifier": "private ",
                "identifier": [
                    "List",
                    "BillPosition"
                ],
                "type": "List<BillPosition>",
                "variable": "billPositions",
                "lineBegin": 30,
                "lineEnd": 31
            }
        ],
        "methods": {
            "getBillPositions": {
                "name": "getBillPositions",
                "lineBegin": 77,
                "lineEnd": 79,
                "annotations": [],
                "returnDataType": [
                    "List<BillPosition>"
                ],
                "identifier": [
                    "List",
                    "BillPosition"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return billPositions;\n}",
                "methodInvocations": []
            },
            "getRTableId": {
                "name": "getRTableId",
                "lineBegin": 57,
                "lineEnd": 59,
                "annotations": [],
                "returnDataType": [
                    "Long"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return rTableId;\n}",
                "methodInvocations": []
            },
            "setBillPositions": {
                "name": "setBillPositions",
                "lineBegin": 81,
                "lineEnd": 83,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "List<BillPosition>",
                        "variable": "billPositions",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.billPositions = billPositions;\n}",
                "methodInvocations": []
            },
            "setBillId": {
                "name": "setBillId",
                "lineBegin": 37,
                "lineEnd": 39,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "billId",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.billId = billId;\n}",
                "methodInvocations": []
            },
            "getStatus": {
                "name": "getStatus",
                "lineBegin": 41,
                "lineEnd": 43,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return status;\n}",
                "methodInvocations": []
            },
            "setStatus": {
                "name": "setStatus",
                "lineBegin": 45,
                "lineEnd": 47,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "status",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.status = status;\n}",
                "methodInvocations": []
            },
            "getCreationDate": {
                "name": "getCreationDate",
                "lineBegin": 49,
                "lineEnd": 51,
                "annotations": [],
                "returnDataType": [
                    "Date"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return creationDate;\n}",
                "methodInvocations": []
            },
            "getValue": {
                "name": "getValue",
                "lineBegin": 65,
                "lineEnd": 67,
                "annotations": [],
                "returnDataType": [
                    "double"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return value;\n}",
                "methodInvocations": []
            },
            "setCreationDate": {
                "name": "setCreationDate",
                "lineBegin": 53,
                "lineEnd": 55,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Date",
                        "variable": "creationDate",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.creationDate = creationDate;\n}",
                "methodInvocations": []
            },
            "getBillId": {
                "name": "getBillId",
                "lineBegin": 33,
                "lineEnd": 35,
                "annotations": [],
                "returnDataType": [
                    "Long"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return billId;\n}",
                "methodInvocations": []
            },
            "setValue": {
                "name": "setValue",
                "lineBegin": 69,
                "lineEnd": 71,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "double",
                        "variable": "value",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.value = value;\n}",
                "methodInvocations": []
            },
            "setRTableId": {
                "name": "setRTableId",
                "lineBegin": 61,
                "lineEnd": 63,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "rTableId",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.rTableId = rTableId;\n}",
                "methodInvocations": []
            },
            "changeValue": {
                "name": "changeValue",
                "lineBegin": 73,
                "lineEnd": 75,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "double",
                        "variable": "value",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.value += value;\n}",
                "methodInvocations": []
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.AllArgsConstructor",
            "lombok.Builder",
            "lombok.NoArgsConstructor",
            "javax.persistence",
            "java.util.Date",
            "java.util.List"
        ],
        "methodsInvocations": [],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "getBillPositions",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "List<BillPosition>",
                "parameters": [],
                "body": [
                    "{",
                    "    return billPositions;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getRTableId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Long",
                "parameters": [],
                "body": [
                    "{",
                    "    return rTableId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setBillPositions",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "List<BillPosition>",
                        "variable": "billPositions",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.billPositions = billPositions;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setBillId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "billId",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.billId = billId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getStatus",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return status;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setStatus",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "status",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.status = status;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getCreationDate",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Date",
                "parameters": [],
                "body": [
                    "{",
                    "    return creationDate;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getValue",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "double",
                "parameters": [],
                "body": [
                    "{",
                    "    return value;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setCreationDate",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Date",
                        "variable": "creationDate",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.creationDate = creationDate;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getBillId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Long",
                "parameters": [],
                "body": [
                    "{",
                    "    return billId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setValue",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "double",
                        "variable": "value",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.value = value;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setRTableId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "rTableId",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.rTableId = rTableId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "changeValue",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "double",
                        "variable": "value",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.value += value;",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.entity",
        "begin": 1,
        "end": 51,
        "short_name": "BillPosition",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition",
        "annotations": [
            "@AllArgsConstructor",
            "@NoArgsConstructor",
            "@Entity",
            "@Builder"
        ],
        "dependencies": [
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
        ],
        "instance_variables": [
            {
                "annotations": [
                    "@Id",
                    "@GeneratedValue(strategy = GenerationType.IDENTITY)",
                    "@Column(name = \"BILL_POSITION_ID\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "Long",
                "variable": "billPositionId",
                "lineBegin": 14,
                "lineEnd": 17
            },
            {
                "annotations": [
                    "@ManyToOne",
                    "@JoinColumn(name = \"DISH_ID\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "Dish",
                "variable": "dishId",
                "lineBegin": 19,
                "lineEnd": 21
            },
            {
                "annotations": [
                    "@Column(name = \"BILL_ID\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "Long",
                "variable": "billId",
                "lineBegin": 23,
                "lineEnd": 24
            }
        ],
        "methods": {
            "getDishId": {
                "name": "getDishId",
                "lineBegin": 34,
                "lineEnd": 36,
                "annotations": [],
                "returnDataType": [
                    "Dish"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return dishId;\n}",
                "methodInvocations": []
            },
            "getBillId": {
                "name": "getBillId",
                "lineBegin": 42,
                "lineEnd": 44,
                "annotations": [],
                "returnDataType": [
                    "Long"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return billId;\n}",
                "methodInvocations": []
            },
            "setBillId": {
                "name": "setBillId",
                "lineBegin": 46,
                "lineEnd": 48,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "billId",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.billId = billId;\n}",
                "methodInvocations": []
            },
            "setDishId": {
                "name": "setDishId",
                "lineBegin": 38,
                "lineEnd": 40,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Dish",
                        "variable": "dishId",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.dishId = dishId;\n}",
                "methodInvocations": []
            },
            "getBillPositionId": {
                "name": "getBillPositionId",
                "lineBegin": 26,
                "lineEnd": 28,
                "annotations": [],
                "returnDataType": [
                    "Long"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return billPositionId;\n}",
                "methodInvocations": []
            },
            "setBillPositionId": {
                "name": "setBillPositionId",
                "lineBegin": 30,
                "lineEnd": 32,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "billPositionId",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.billPositionId = billPositionId;\n}",
                "methodInvocations": []
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.AllArgsConstructor",
            "lombok.Builder",
            "lombok.NoArgsConstructor",
            "javax.persistence"
        ],
        "methodsInvocations": [],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "getDishId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Dish",
                "parameters": [],
                "body": [
                    "{",
                    "    return dishId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getBillId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Long",
                "parameters": [],
                "body": [
                    "{",
                    "    return billId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setBillId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "billId",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.billId = billId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setDishId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Dish",
                        "variable": "dishId",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.dishId = dishId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getBillPositionId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Long",
                "parameters": [],
                "body": [
                    "{",
                    "    return billPositionId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setBillPositionId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "billPositionId",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.billPositionId = billPositionId;",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.service.BillService": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.service",
        "begin": 1,
        "end": 86,
        "short_name": "BillService",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService",
        "annotations": [
            "@AllArgsConstructor",
            "@Service"
        ],
        "dependencies": [
            "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
        ],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "BillRepository",
                "variable": "billRepository",
                "lineBegin": 21,
                "lineEnd": 21
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "RTableRepository",
                "variable": "rTableRepository",
                "lineBegin": 22,
                "lineEnd": 22
            }
        ],
        "methods": {
            "getBills": {
                "name": "getBills",
                "lineBegin": 24,
                "lineEnd": 26,
                "annotations": [],
                "returnDataType": [
                    "List<Bill>"
                ],
                "identifier": [
                    "List",
                    "Bill"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return billRepository.findAll();\n}",
                "methodInvocations": [
                    {
                        "scopeName": "billRepository",
                        "methodName": "findAll",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillRepository"
                    }
                ]
            },
            "updateBill": {
                "name": "updateBill",
                "lineBegin": 60,
                "lineEnd": 71,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "Bill",
                        "variable": "bill",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<Bill>",
                        "variable": "oldBill",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    }
                ],
                "body": "{\n    Optional<Bill> oldBill = billRepository.findById(id);\n    if (!oldBill.isPresent())\n        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Bill not found.\");\n    else {\n        bill.setBillId(id);\n        billRepository.save(bill);\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "billRepository",
                        "methodName": "findById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillRepository"
                    },
                    {
                        "scopeName": "oldBill",
                        "methodName": "isPresent",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    },
                    {
                        "scopeName": "bill",
                        "methodName": "setBillId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    },
                    {
                        "scopeName": "billRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillRepository"
                    }
                ]
            },
            "deleteBillById": {
                "name": "deleteBillById",
                "lineBegin": 73,
                "lineEnd": 80,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    if (billRepository.findById(id).isPresent()) {\n        billRepository.deleteById(id);\n    } else {\n        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Bill not found.\");\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "billRepository",
                        "methodName": "findById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillRepository"
                    },
                    {
                        "scopeName": "billRepository",
                        "methodName": "deleteById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillRepository"
                    }
                ]
            },
            "getBillById": {
                "name": "getBillById",
                "lineBegin": 29,
                "lineEnd": 37,
                "annotations": [],
                "returnDataType": [
                    "Optional<Bill>"
                ],
                "identifier": [
                    "Optional",
                    "Bill"
                ],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<Bill>",
                        "variable": "bill",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    }
                ],
                "body": "{\n    Optional<Bill> bill = billRepository.findById(id);\n    if (bill.isPresent()) {\n        return bill;\n    } else {\n        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Bill not found.\");\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "billRepository",
                        "methodName": "findById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillRepository"
                    },
                    {
                        "scopeName": "bill",
                        "methodName": "isPresent",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    }
                ]
            },
            "addBill": {
                "name": "addBill",
                "lineBegin": 40,
                "lineEnd": 57,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Bill",
                        "variable": "bill",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<RTable>",
                        "variable": "rTable",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    }
                ],
                "body": "{\n    Optional<RTable> rTable = rTableRepository.findById(bill.getRTableId());\n    if (rTable.isPresent()) {\n        if (rTable.get().getStatus().equals(\"BUSY\")) {\n            throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"This table is already being served.\");\n        } else {\n            bill.setValue(0);\n            bill.setStatus(\"IN_PROGRESS\");\n            bill.setCreationDate(new Date());\n            rTable.get().setStatus(\"BUSY\");\n            billRepository.save(bill);\n        }\n    } else {\n        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Table not found.\");\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "bill",
                        "methodName": "getRTableId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    },
                    {
                        "scopeName": "rTableRepository",
                        "methodName": "findById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
                    },
                    {
                        "scopeName": "rTable",
                        "methodName": "isPresent",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    },
                    {
                        "scopeName": "rTable",
                        "methodName": "get",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    },
                    {
                        "scopeName": "rTable.get()",
                        "methodName": "getStatus",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    },
                    {
                        "scopeName": "rTable.get().getStatus()",
                        "methodName": "equals",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    },
                    {
                        "scopeName": "bill",
                        "methodName": "setValue",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    },
                    {
                        "scopeName": "bill",
                        "methodName": "setStatus",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    },
                    {
                        "scopeName": "bill",
                        "methodName": "setCreationDate",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    },
                    {
                        "scopeName": "rTable",
                        "methodName": "get",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    },
                    {
                        "scopeName": "rTable.get()",
                        "methodName": "setStatus",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    },
                    {
                        "scopeName": "billRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillRepository"
                    }
                ]
            },
            "getBillBillPositions": {
                "name": "getBillBillPositions",
                "lineBegin": 82,
                "lineEnd": 85,
                "annotations": [],
                "returnDataType": [
                    "List<BillPosition>"
                ],
                "identifier": [
                    "List",
                    "BillPosition"
                ],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<Bill>",
                        "variable": "bill",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    }
                ],
                "body": "{\n    Optional<Bill> bill = getBillById(id);\n    return bill.get().getBillPositions();\n}",
                "methodInvocations": [
                    {
                        "scopeName": "bill",
                        "methodName": "get",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    },
                    {
                        "scopeName": "bill.get()",
                        "methodName": "getBillPositions",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    }
                ]
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.AllArgsConstructor",
            "org.springframework.http.HttpStatus",
            "org.springframework.stereotype.Service",
            "org.springframework.web.server.ResponseStatusException",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable",
            "pl.edu.wat.wcy.pz.restaurantServer.repository.BillRepository",
            "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository",
            "java.util.Date",
            "java.util.List",
            "java.util.Optional"
        ],
        "methodsInvocations": [
            {
                "scopeName": "billRepository",
                "methodName": "findAll",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillRepository"
            },
            {
                "scopeName": "billRepository",
                "methodName": "findById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillRepository"
            },
            {
                "scopeName": "bill",
                "methodName": "getRTableId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
            },
            {
                "scopeName": "rTableRepository",
                "methodName": "findById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
            },
            {
                "scopeName": "bill",
                "methodName": "setValue",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
            },
            {
                "scopeName": "bill",
                "methodName": "setStatus",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
            },
            {
                "scopeName": "bill",
                "methodName": "setCreationDate",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
            },
            {
                "scopeName": "billRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillRepository"
            },
            {
                "scopeName": "billRepository",
                "methodName": "findById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillRepository"
            },
            {
                "scopeName": "bill",
                "methodName": "setBillId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
            },
            {
                "scopeName": "billRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillRepository"
            },
            {
                "scopeName": "billRepository",
                "methodName": "findById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillRepository"
            },
            {
                "scopeName": "billRepository",
                "methodName": "deleteById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillRepository"
            }
        ],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "getBills",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "List<Bill>",
                "parameters": [],
                "body": [
                    "{",
                    "    return billRepository.findAll();",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "updateBill",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "Bill",
                        "variable": "bill",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<Bill> oldBill = billRepository.findById(id);",
                    "    if (!oldBill.isPresent())",
                    "        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Bill not found.\");",
                    "    else {",
                    "        bill.setBillId(id);",
                    "        billRepository.save(bill);",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "deleteBillById",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    if (billRepository.findById(id).isPresent()) {",
                    "        billRepository.deleteById(id);",
                    "    } else {",
                    "        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Bill not found.\");",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getBillById",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Optional<Bill>",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<Bill> bill = billRepository.findById(id);",
                    "    if (bill.isPresent()) {",
                    "        return bill;",
                    "    } else {",
                    "        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Bill not found.\");",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "addBill",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Bill",
                        "variable": "bill",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<RTable> rTable = rTableRepository.findById(bill.getRTableId());",
                    "    if (rTable.isPresent()) {",
                    "        if (rTable.get().getStatus().equals(\"BUSY\")) {",
                    "            throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"This table is already being served.\");",
                    "        } else {",
                    "            bill.setValue(0);",
                    "            bill.setStatus(\"IN_PROGRESS\");",
                    "            bill.setCreationDate(new Date());",
                    "            rTable.get().setStatus(\"BUSY\");",
                    "            billRepository.save(bill);",
                    "        }",
                    "    } else {",
                    "        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Table not found.\");",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getBillBillPositions",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "List<BillPosition>",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<Bill> bill = getBillById(id);",
                    "    return bill.get().getBillPositions();",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.controller.BillController": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.controller.BillController",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.controller",
        "begin": 1,
        "end": 61,
        "short_name": "BillController",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.controller.BillController",
        "annotations": [
            "@AllArgsConstructor",
            "@RestController",
            "@CrossOrigin"
        ],
        "dependencies": [
            "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
        ],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "BillService",
                "variable": "billService",
                "lineBegin": 18,
                "lineEnd": 18
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "RTableRepository",
                "variable": "rTableRepository",
                "lineBegin": 19,
                "lineEnd": 19
            }
        ],
        "methods": {
            "getBills": {
                "name": "getBills",
                "lineBegin": 22,
                "lineEnd": 25,
                "annotations": [
                    "@GetMapping(\"/bills\")"
                ],
                "returnDataType": [
                    "Collection<Bill>"
                ],
                "identifier": [
                    "Collection",
                    "Bill"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return billService.getBills();\n}",
                "methodInvocations": [
                    {
                        "scopeName": "billService",
                        "methodName": "getBills",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
                    }
                ]
            },
            "updateBill": {
                "name": "updateBill",
                "lineBegin": 44,
                "lineEnd": 51,
                "annotations": [
                    "@PutMapping(\"/bills/{id}\")"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "Bill",
                        "variable": "bill",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    if (bill.getStatus().equals(\"PAID\")) {\n        rTableRepository.findById(bill.getRTableId()).get().setStatus(\"FREE\");\n    }\n    billService.updateBill(id, bill);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "bill",
                        "methodName": "getStatus",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    },
                    {
                        "scopeName": "bill.getStatus()",
                        "methodName": "equals",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    },
                    {
                        "scopeName": "bill",
                        "methodName": "getRTableId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    },
                    {
                        "scopeName": "rTableRepository",
                        "methodName": "findById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
                    },
                    {
                        "scopeName": "billService",
                        "methodName": "updateBill",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
                    }
                ]
            },
            "getBillById": {
                "name": "getBillById",
                "lineBegin": 28,
                "lineEnd": 32,
                "annotations": [
                    "@GetMapping(value = \"/bills/{id}\")"
                ],
                "returnDataType": [
                    "Bill"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<Bill>",
                        "variable": "bill",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    }
                ],
                "body": "{\n    Optional<Bill> bill = billService.getBillById(id);\n    return bill.orElse(null);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "billService",
                        "methodName": "getBillById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
                    },
                    {
                        "scopeName": "bill",
                        "methodName": "orElse",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    }
                ]
            },
            "deleteBill": {
                "name": "deleteBill",
                "lineBegin": 53,
                "lineEnd": 57,
                "annotations": [
                    "@DeleteMapping(\"/bills/{id}\")"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<Bill>",
                        "variable": "bill",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    }
                ],
                "body": "{\n    Optional<Bill> bill = billService.getBillById(id);\n    billService.deleteBillById(id);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "billService",
                        "methodName": "getBillById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
                    },
                    {
                        "scopeName": "billService",
                        "methodName": "deleteBillById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
                    }
                ]
            },
            "getBillBillPositions": {
                "name": "getBillBillPositions",
                "lineBegin": 34,
                "lineEnd": 37,
                "annotations": [
                    "@GetMapping(value = \"/bills/{id}/billPositions\")"
                ],
                "returnDataType": [
                    "Collection<BillPosition>"
                ],
                "identifier": [
                    "Collection",
                    "BillPosition"
                ],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    return billService.getBillBillPositions(id);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "billService",
                        "methodName": "getBillBillPositions",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
                    }
                ]
            },
            "addBill": {
                "name": "addBill",
                "lineBegin": 39,
                "lineEnd": 42,
                "annotations": [
                    "@PostMapping(\"/bills\")"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Bill",
                        "variable": "bill",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    billService.addBill(bill);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "billService",
                        "methodName": "addBill",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
                    }
                ]
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.AllArgsConstructor",
            "org.springframework.web.bind.annotation",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition",
            "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository",
            "pl.edu.wat.wcy.pz.restaurantServer.service.BillService",
            "java.util.Collection",
            "java.util.Optional"
        ],
        "methodsInvocations": [
            {
                "scopeName": "billService",
                "methodName": "getBills",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
            },
            {
                "scopeName": "billService",
                "methodName": "getBillById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
            },
            {
                "scopeName": "billService",
                "methodName": "getBillBillPositions",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
            },
            {
                "scopeName": "billService",
                "methodName": "addBill",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
            },
            {
                "scopeName": "bill",
                "methodName": "getStatus",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
            },
            {
                "scopeName": "bill.getStatus()",
                "methodName": "equals",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
            },
            {
                "scopeName": "bill",
                "methodName": "getRTableId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
            },
            {
                "scopeName": "rTableRepository",
                "methodName": "findById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
            },
            {
                "scopeName": "billService",
                "methodName": "updateBill",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
            },
            {
                "scopeName": "billService",
                "methodName": "getBillById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
            },
            {
                "scopeName": "billService",
                "methodName": "deleteBillById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
            }
        ],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "getBills",
                "annotations": [
                    "@GetMapping(\"/bills\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "Collection<Bill>",
                "parameters": [],
                "body": [
                    "{",
                    "    return billService.getBills();",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "updateBill",
                "annotations": [
                    "@PutMapping(\"/bills/{id}\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "Bill",
                        "variable": "bill",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    if (bill.getStatus().equals(\"PAID\")) {",
                    "        rTableRepository.findById(bill.getRTableId()).get().setStatus(\"FREE\");",
                    "    }",
                    "    billService.updateBill(id, bill);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getBillById",
                "annotations": [
                    "@GetMapping(value = \"/bills/{id}\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "Bill",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<Bill> bill = billService.getBillById(id);",
                    "    return bill.orElse(null);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "deleteBill",
                "annotations": [
                    "@DeleteMapping(\"/bills/{id}\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<Bill> bill = billService.getBillById(id);",
                    "    billService.deleteBillById(id);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getBillBillPositions",
                "annotations": [
                    "@GetMapping(value = \"/bills/{id}/billPositions\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "Collection<BillPosition>",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    return billService.getBillBillPositions(id);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "addBill",
                "annotations": [
                    "@PostMapping(\"/bills\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Bill",
                        "variable": "bill",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    billService.addBill(bill);",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.service.BillPositionService": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.service.BillPositionService",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.service",
        "begin": 1,
        "end": 79,
        "short_name": "BillPositionService",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.service.BillPositionService",
        "annotations": [
            "@AllArgsConstructor",
            "@Service"
        ],
        "dependencies": [
            "pl.edu.wat.wcy.pz.restaurantServer.service.DishService"
        ],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "BillPositionRepository",
                "variable": "billPositionRepository",
                "lineBegin": 18,
                "lineEnd": 18
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "BillService",
                "variable": "billService",
                "lineBegin": 19,
                "lineEnd": 19
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "DishService",
                "variable": "dishService",
                "lineBegin": 20,
                "lineEnd": 20
            }
        ],
        "methods": {
            "getBillPositions": {
                "name": "getBillPositions",
                "lineBegin": 22,
                "lineEnd": 24,
                "annotations": [],
                "returnDataType": [
                    "List<BillPosition>"
                ],
                "identifier": [
                    "List",
                    "BillPosition"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return billPositionRepository.findAll();\n}",
                "methodInvocations": [
                    {
                        "scopeName": "billPositionRepository",
                        "methodName": "findAll",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillPositionRepository"
                    }
                ]
            },
            "updateBillPosition": {
                "name": "updateBillPosition",
                "lineBegin": 49,
                "lineEnd": 60,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "BillPosition",
                        "variable": "billPosition",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<BillPosition>",
                        "variable": "oldBillPosition",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    }
                ],
                "body": "{\n    Optional<BillPosition> oldBillPosition = billPositionRepository.findById(id);\n    if (!oldBillPosition.isPresent())\n        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"BillPosition not found.\");\n    else {\n        billPosition.setBillPositionId(id);\n        billPositionRepository.save(billPosition);\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "billPositionRepository",
                        "methodName": "findById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillPositionRepository"
                    },
                    {
                        "scopeName": "oldBillPosition",
                        "methodName": "isPresent",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    },
                    {
                        "scopeName": "billPosition",
                        "methodName": "setBillPositionId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    },
                    {
                        "scopeName": "billPositionRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillPositionRepository"
                    }
                ]
            },
            "addBillPosition": {
                "name": "addBillPosition",
                "lineBegin": 36,
                "lineEnd": 47,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "BillPosition",
                        "variable": "billPosition",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    if (billService.getBillById(billPosition.getBillId()).get().getStatus().equals(\"PAID\")) {\n        throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"Bill has already been closed.\");\n    } else {\n        billPosition.setDishId(billPosition.getDishId());\n        billService.getBillById(billPosition.getBillId()).get().changeValue(billPosition.getDishId().getPrice());\n        billPositionRepository.save(billPosition);\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "billPosition",
                        "methodName": "getBillId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    },
                    {
                        "scopeName": "billService",
                        "methodName": "getBillById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
                    },
                    {
                        "scopeName": "billPosition",
                        "methodName": "getDishId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    },
                    {
                        "scopeName": "billPosition",
                        "methodName": "setDishId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    },
                    {
                        "scopeName": "billPosition",
                        "methodName": "getDishId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    },
                    {
                        "scopeName": "billPosition.getDishId()",
                        "methodName": "getPrice",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    },
                    {
                        "scopeName": "billPosition",
                        "methodName": "getBillId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    },
                    {
                        "scopeName": "billService",
                        "methodName": "getBillById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
                    },
                    {
                        "scopeName": "billPositionRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillPositionRepository"
                    }
                ]
            },
            "getBillPositionById": {
                "name": "getBillPositionById",
                "lineBegin": 26,
                "lineEnd": 34,
                "annotations": [],
                "returnDataType": [
                    "Optional<BillPosition>"
                ],
                "identifier": [
                    "Optional",
                    "BillPosition"
                ],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<BillPosition>",
                        "variable": "billPosition",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    }
                ],
                "body": "{\n    Optional<BillPosition> billPosition = billPositionRepository.findById(id);\n    if (billPosition.isPresent()) {\n        return billPosition;\n    } else {\n        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"BillPosition not found.\");\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "billPositionRepository",
                        "methodName": "findById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillPositionRepository"
                    },
                    {
                        "scopeName": "billPosition",
                        "methodName": "isPresent",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    }
                ]
            },
            "deleteBillPositionById": {
                "name": "deleteBillPositionById",
                "lineBegin": 62,
                "lineEnd": 77,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<BillPosition>",
                        "variable": "billPosition",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    }
                ],
                "body": "{\n    Optional<BillPosition> billPosition = billPositionRepository.findById(id);\n    if (billPosition.isPresent()) {\n        if (billService.getBillById(billPosition.get().getBillId()).get().getStatus().equals(\"PAID\")) {\n            throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"Bill has already been closed.\");\n        } else {\n            billService.getBillById(billPosition.get().getBillId()).get().changeValue(-billPosition.get().getDishId().getPrice());\n            billPositionRepository.deleteById(id);\n        }\n    } else {\n        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"BillPosition not found.\");\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "billPositionRepository",
                        "methodName": "findById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillPositionRepository"
                    },
                    {
                        "scopeName": "billPosition",
                        "methodName": "isPresent",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    },
                    {
                        "scopeName": "billPosition",
                        "methodName": "get",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    },
                    {
                        "scopeName": "billPosition.get()",
                        "methodName": "getBillId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    },
                    {
                        "scopeName": "billService",
                        "methodName": "getBillById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
                    },
                    {
                        "scopeName": "billPosition",
                        "methodName": "get",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    },
                    {
                        "scopeName": "billPosition.get()",
                        "methodName": "getDishId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    },
                    {
                        "scopeName": "billPosition.get().getDishId()",
                        "methodName": "getPrice",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    },
                    {
                        "scopeName": "billPosition",
                        "methodName": "get",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    },
                    {
                        "scopeName": "billPosition.get()",
                        "methodName": "getBillId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    },
                    {
                        "scopeName": "billService",
                        "methodName": "getBillById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
                    },
                    {
                        "scopeName": "billPositionRepository",
                        "methodName": "deleteById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillPositionRepository"
                    }
                ]
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.AllArgsConstructor",
            "org.springframework.http.HttpStatus",
            "org.springframework.stereotype.Service",
            "org.springframework.web.server.ResponseStatusException",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition",
            "pl.edu.wat.wcy.pz.restaurantServer.repository.BillPositionRepository",
            "java.util.List",
            "java.util.Optional"
        ],
        "methodsInvocations": [
            {
                "scopeName": "billPositionRepository",
                "methodName": "findAll",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillPositionRepository"
            },
            {
                "scopeName": "billPositionRepository",
                "methodName": "findById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillPositionRepository"
            },
            {
                "scopeName": "billPosition",
                "methodName": "getBillId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
            },
            {
                "scopeName": "billService",
                "methodName": "getBillById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
            },
            {
                "scopeName": "billPosition",
                "methodName": "getDishId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
            },
            {
                "scopeName": "billPosition",
                "methodName": "setDishId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
            },
            {
                "scopeName": "billPosition",
                "methodName": "getDishId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
            },
            {
                "scopeName": "billPosition.getDishId()",
                "methodName": "getPrice",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
            },
            {
                "scopeName": "billPosition",
                "methodName": "getBillId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
            },
            {
                "scopeName": "billService",
                "methodName": "getBillById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
            },
            {
                "scopeName": "billPositionRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillPositionRepository"
            },
            {
                "scopeName": "billPositionRepository",
                "methodName": "findById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillPositionRepository"
            },
            {
                "scopeName": "billPosition",
                "methodName": "setBillPositionId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
            },
            {
                "scopeName": "billPositionRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillPositionRepository"
            },
            {
                "scopeName": "billPositionRepository",
                "methodName": "findById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillPositionRepository"
            },
            {
                "scopeName": "billService",
                "methodName": "getBillById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
            },
            {
                "scopeName": "billService",
                "methodName": "getBillById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillService"
            },
            {
                "scopeName": "billPositionRepository",
                "methodName": "deleteById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillPositionRepository"
            }
        ],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "getBillPositions",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "List<BillPosition>",
                "parameters": [],
                "body": [
                    "{",
                    "    return billPositionRepository.findAll();",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "updateBillPosition",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "BillPosition",
                        "variable": "billPosition",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<BillPosition> oldBillPosition = billPositionRepository.findById(id);",
                    "    if (!oldBillPosition.isPresent())",
                    "        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"BillPosition not found.\");",
                    "    else {",
                    "        billPosition.setBillPositionId(id);",
                    "        billPositionRepository.save(billPosition);",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "addBillPosition",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "BillPosition",
                        "variable": "billPosition",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    if (billService.getBillById(billPosition.getBillId()).get().getStatus().equals(\"PAID\")) {",
                    "        throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"Bill has already been closed.\");",
                    "    } else {",
                    "        billPosition.setDishId(billPosition.getDishId());",
                    "        billService.getBillById(billPosition.getBillId()).get().changeValue(billPosition.getDishId().getPrice());",
                    "        billPositionRepository.save(billPosition);",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getBillPositionById",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Optional<BillPosition>",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<BillPosition> billPosition = billPositionRepository.findById(id);",
                    "    if (billPosition.isPresent()) {",
                    "        return billPosition;",
                    "    } else {",
                    "        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"BillPosition not found.\");",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "deleteBillPositionById",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<BillPosition> billPosition = billPositionRepository.findById(id);",
                    "    if (billPosition.isPresent()) {",
                    "        if (billService.getBillById(billPosition.get().getBillId()).get().getStatus().equals(\"PAID\")) {",
                    "            throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"Bill has already been closed.\");",
                    "        } else {",
                    "            billService.getBillById(billPosition.get().getBillId()).get().changeValue(-billPosition.get().getDishId().getPrice());",
                    "            billPositionRepository.deleteById(id);",
                    "        }",
                    "    } else {",
                    "        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"BillPosition not found.\");",
                    "    }",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.controller.BillPositionController": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.controller.BillPositionController",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.controller",
        "begin": 1,
        "end": 50,
        "short_name": "BillPositionController",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.controller.BillPositionController",
        "annotations": [
            "@AllArgsConstructor",
            "@RestController",
            "@CrossOrigin"
        ],
        "dependencies": [],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "BillPositionService",
                "variable": "billPositionService",
                "lineBegin": 16,
                "lineEnd": 16
            }
        ],
        "methods": {
            "getBillPositions": {
                "name": "getBillPositions",
                "lineBegin": 19,
                "lineEnd": 22,
                "annotations": [
                    "@GetMapping(\"/billPositions\")"
                ],
                "returnDataType": [
                    "Collection<BillPosition>"
                ],
                "identifier": [
                    "Collection",
                    "BillPosition"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return billPositionService.getBillPositions();\n}",
                "methodInvocations": [
                    {
                        "scopeName": "billPositionService",
                        "methodName": "getBillPositions",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillPositionService"
                    }
                ]
            },
            "updateBillPosition": {
                "name": "updateBillPosition",
                "lineBegin": 36,
                "lineEnd": 40,
                "annotations": [
                    "@PutMapping(\"/billPositions/{id}\")"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "BillPosition",
                        "variable": "billPosition",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    billPositionService.updateBillPosition(id, billPosition);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "billPositionService",
                        "methodName": "updateBillPosition",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillPositionService"
                    }
                ]
            },
            "deleteBillPosition": {
                "name": "deleteBillPosition",
                "lineBegin": 42,
                "lineEnd": 46,
                "annotations": [
                    "@DeleteMapping(\"/billPositions/{id}\")"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<BillPosition>",
                        "variable": "billPosition",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    }
                ],
                "body": "{\n    Optional<BillPosition> billPosition = billPositionService.getBillPositionById(id);\n    billPositionService.deleteBillPositionById(id);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "billPositionService",
                        "methodName": "getBillPositionById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillPositionService"
                    },
                    {
                        "scopeName": "billPositionService",
                        "methodName": "deleteBillPositionById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillPositionService"
                    }
                ]
            },
            "addBillPosition": {
                "name": "addBillPosition",
                "lineBegin": 31,
                "lineEnd": 34,
                "annotations": [
                    "@PostMapping(\"/billPositions\")"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "BillPosition",
                        "variable": "billPosition",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    billPositionService.addBillPosition(billPosition);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "billPositionService",
                        "methodName": "addBillPosition",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillPositionService"
                    }
                ]
            },
            "getBillPositionById": {
                "name": "getBillPositionById",
                "lineBegin": 25,
                "lineEnd": 29,
                "annotations": [
                    "@GetMapping(value = \"/billPositions/{id}\")"
                ],
                "returnDataType": [
                    "BillPosition"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<BillPosition>",
                        "variable": "billPosition",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    }
                ],
                "body": "{\n    Optional<BillPosition> billPosition = billPositionService.getBillPositionById(id);\n    return billPosition.orElse(null);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "billPositionService",
                        "methodName": "getBillPositionById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillPositionService"
                    },
                    {
                        "scopeName": "billPosition",
                        "methodName": "orElse",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition"
                    }
                ]
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.AllArgsConstructor",
            "org.springframework.web.bind.annotation",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition",
            "pl.edu.wat.wcy.pz.restaurantServer.service.BillPositionService",
            "java.util.Collection",
            "java.util.Optional"
        ],
        "methodsInvocations": [
            {
                "scopeName": "billPositionService",
                "methodName": "getBillPositions",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillPositionService"
            },
            {
                "scopeName": "billPositionService",
                "methodName": "getBillPositionById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillPositionService"
            },
            {
                "scopeName": "billPositionService",
                "methodName": "addBillPosition",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillPositionService"
            },
            {
                "scopeName": "billPositionService",
                "methodName": "updateBillPosition",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillPositionService"
            },
            {
                "scopeName": "billPositionService",
                "methodName": "getBillPositionById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillPositionService"
            },
            {
                "scopeName": "billPositionService",
                "methodName": "deleteBillPositionById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.BillPositionService"
            }
        ],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "getBillPositions",
                "annotations": [
                    "@GetMapping(\"/billPositions\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "Collection<BillPosition>",
                "parameters": [],
                "body": [
                    "{",
                    "    return billPositionService.getBillPositions();",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "updateBillPosition",
                "annotations": [
                    "@PutMapping(\"/billPositions/{id}\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "BillPosition",
                        "variable": "billPosition",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    billPositionService.updateBillPosition(id, billPosition);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "deleteBillPosition",
                "annotations": [
                    "@DeleteMapping(\"/billPositions/{id}\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<BillPosition> billPosition = billPositionService.getBillPositionById(id);",
                    "    billPositionService.deleteBillPositionById(id);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "addBillPosition",
                "annotations": [
                    "@PostMapping(\"/billPositions\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "BillPosition",
                        "variable": "billPosition",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    billPositionService.addBillPosition(billPosition);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getBillPositionById",
                "annotations": [
                    "@GetMapping(value = \"/billPositions/{id}\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "BillPosition",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<BillPosition> billPosition = billPositionService.getBillPositionById(id);",
                    "    return billPosition.orElse(null);",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.repository.BillPositionRepository": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillPositionRepository",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.repository",
        "begin": 1,
        "end": 13,
        "short_name": "BillPositionRepository",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillPositionRepository",
        "annotations": [
            "@Transactional",
            "@Repository"
        ],
        "dependencies": [],
        "instance_variables": [],
        "methods": {},
        "implements": [],
        "extends": [
            "JpaRepository<BillPosition, Long>"
        ],
        "imports": [
            "org.springframework.data.jpa.repository.JpaRepository",
            "org.springframework.stereotype.Repository",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.BillPosition",
            "javax.transaction.Transactional"
        ],
        "methodsInvocations": [],
        "isInterface": true,
        "myInterfaces": [],
        "myMethods": [],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.repository.BillRepository": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillRepository",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.repository",
        "begin": 1,
        "end": 13,
        "short_name": "BillRepository",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.repository.BillRepository",
        "annotations": [
            "@Transactional",
            "@Repository"
        ],
        "dependencies": [],
        "instance_variables": [],
        "methods": {},
        "implements": [],
        "extends": [
            "JpaRepository<Bill, Long>"
        ],
        "imports": [
            "org.springframework.data.jpa.repository.JpaRepository",
            "org.springframework.stereotype.Repository",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill",
            "javax.transaction.Transactional"
        ],
        "methodsInvocations": [],
        "isInterface": true,
        "myInterfaces": [],
        "myMethods": [],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.service",
        "begin": 1,
        "end": 95,
        "short_name": "RTableService",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService",
        "annotations": [
            "@AllArgsConstructor",
            "@Service"
        ],
        "dependencies": [
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
        ],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "RTableRepository",
                "variable": "rTableRepository",
                "lineBegin": 19,
                "lineEnd": 19
            }
        ],
        "methods": {
            "addRTable": {
                "name": "addRTable",
                "lineBegin": 39,
                "lineEnd": 48,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "RTable",
                        "variable": "rTable",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    if (rTableRepository.existsByNumber(rTable.getNumber())) {\n        throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"Table with this number already exists.\");\n    } else {\n        rTable.setStatus(\"FREE\");\n        rTableRepository.save(rTable);\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "rTable",
                        "methodName": "getNumber",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    },
                    {
                        "scopeName": "rTableRepository",
                        "methodName": "existsByNumber",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
                    },
                    {
                        "scopeName": "rTable",
                        "methodName": "setStatus",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    },
                    {
                        "scopeName": "rTableRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
                    }
                ]
            },
            "updateRTable": {
                "name": "updateRTable",
                "lineBegin": 50,
                "lineEnd": 61,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "RTable",
                        "variable": "rTable",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<RTable>",
                        "variable": "oldRTable",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    }
                ],
                "body": "{\n    Optional<RTable> oldRTable = rTableRepository.findById(id);\n    if (!oldRTable.isPresent())\n        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Table not found.\");\n    else {\n        rTable.setRTableId(id);\n        rTableRepository.save(rTable);\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "rTableRepository",
                        "methodName": "findById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
                    },
                    {
                        "scopeName": "oldRTable",
                        "methodName": "isPresent",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    },
                    {
                        "scopeName": "rTable",
                        "methodName": "setRTableId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    },
                    {
                        "scopeName": "rTableRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
                    }
                ]
            },
            "getRTablesBySize": {
                "name": "getRTablesBySize",
                "lineBegin": 25,
                "lineEnd": 27,
                "annotations": [],
                "returnDataType": [
                    "List<RTable>"
                ],
                "identifier": [
                    "List",
                    "RTable"
                ],
                "parametersDataType": [
                    {
                        "type": "int",
                        "variable": "size",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    return rTableRepository.findAllBySize(size);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "rTableRepository",
                        "methodName": "findAllBySize",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
                    }
                ]
            },
            "deleteRTableById": {
                "name": "deleteRTableById",
                "lineBegin": 63,
                "lineEnd": 70,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    if (rTableRepository.findById(id).isPresent()) {\n        rTableRepository.deleteById(id);\n    } else {\n        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Table not found.\");\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "rTableRepository",
                        "methodName": "findById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
                    },
                    {
                        "scopeName": "rTableRepository",
                        "methodName": "deleteById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
                    }
                ]
            },
            "getRTableById": {
                "name": "getRTableById",
                "lineBegin": 29,
                "lineEnd": 37,
                "annotations": [],
                "returnDataType": [
                    "Optional<RTable>"
                ],
                "identifier": [
                    "Optional",
                    "RTable"
                ],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<RTable>",
                        "variable": "rTable",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    }
                ],
                "body": "{\n    Optional<RTable> rTable = rTableRepository.findById(id);\n    if (rTable.isPresent()) {\n        return rTable;\n    } else {\n        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Table not found.\");\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "rTableRepository",
                        "methodName": "findById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
                    },
                    {
                        "scopeName": "rTable",
                        "methodName": "isPresent",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    }
                ]
            },
            "getRTableBills": {
                "name": "getRTableBills",
                "lineBegin": 77,
                "lineEnd": 80,
                "annotations": [],
                "returnDataType": [
                    "List<Bill>"
                ],
                "identifier": [
                    "List",
                    "Bill"
                ],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<RTable>",
                        "variable": "rTable",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    }
                ],
                "body": "{\n    Optional<RTable> rTable = getRTableById(id);\n    return rTable.get().getBills();\n}",
                "methodInvocations": [
                    {
                        "scopeName": "rTable",
                        "methodName": "get",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    },
                    {
                        "scopeName": "rTable.get()",
                        "methodName": "getBills",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    }
                ]
            },
            "getRTableReservations": {
                "name": "getRTableReservations",
                "lineBegin": 72,
                "lineEnd": 75,
                "annotations": [],
                "returnDataType": [
                    "List<Reservation>"
                ],
                "identifier": [
                    "List",
                    "Reservation"
                ],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<RTable>",
                        "variable": "rTable",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    }
                ],
                "body": "{\n    Optional<RTable> rTable = getRTableById(id);\n    return rTable.get().getReservations();\n}",
                "methodInvocations": [
                    {
                        "scopeName": "rTable",
                        "methodName": "get",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    },
                    {
                        "scopeName": "rTable.get()",
                        "methodName": "getReservations",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    }
                ]
            },
            "getRTables": {
                "name": "getRTables",
                "lineBegin": 21,
                "lineEnd": 23,
                "annotations": [],
                "returnDataType": [
                    "List<RTable>"
                ],
                "identifier": [
                    "List",
                    "RTable"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return rTableRepository.findAll();\n}",
                "methodInvocations": [
                    {
                        "scopeName": "rTableRepository",
                        "methodName": "findAll",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
                    }
                ]
            },
            "getCurrentBill": {
                "name": "getCurrentBill",
                "lineBegin": 82,
                "lineEnd": 93,
                "annotations": [],
                "returnDataType": [
                    "Bill"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "List<Bill>",
                        "variable": "bills",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    },
                    {
                        "type": "Bill",
                        "variable": "temp",
                        "qualifedType": ""
                    },
                    {
                        "type": "int",
                        "variable": "i",
                        "qualifedType": ""
                    }
                ],
                "body": "{\n    List<Bill> bills = getRTableBills(id);\n    Bill temp;\n    for (int i = 0; i < bills.size(); i++) {\n        temp = bills.get(i);\n        if (temp.getStatus().equals(\"IN_PROGRESS\")) {\n            return temp;\n        }\n    }\n    throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Table don't have active bills.\");\n}",
                "methodInvocations": [
                    {
                        "scopeName": "bills",
                        "methodName": "get",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    },
                    {
                        "scopeName": "temp",
                        "methodName": "getStatus",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    },
                    {
                        "scopeName": "temp.getStatus()",
                        "methodName": "equals",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    },
                    {
                        "scopeName": "bills",
                        "methodName": "size",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
                    }
                ]
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.AllArgsConstructor",
            "org.springframework.http.HttpStatus",
            "org.springframework.stereotype.Service",
            "org.springframework.web.server.ResponseStatusException",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation",
            "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository",
            "java.util.List",
            "java.util.Optional"
        ],
        "methodsInvocations": [
            {
                "scopeName": "rTableRepository",
                "methodName": "findAll",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
            },
            {
                "scopeName": "rTableRepository",
                "methodName": "findAllBySize",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
            },
            {
                "scopeName": "rTableRepository",
                "methodName": "findById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
            },
            {
                "scopeName": "rTable",
                "methodName": "getNumber",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
            },
            {
                "scopeName": "rTableRepository",
                "methodName": "existsByNumber",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
            },
            {
                "scopeName": "rTable",
                "methodName": "setStatus",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
            },
            {
                "scopeName": "rTableRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
            },
            {
                "scopeName": "rTableRepository",
                "methodName": "findById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
            },
            {
                "scopeName": "rTable",
                "methodName": "setRTableId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
            },
            {
                "scopeName": "rTableRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
            },
            {
                "scopeName": "rTableRepository",
                "methodName": "findById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
            },
            {
                "scopeName": "rTableRepository",
                "methodName": "deleteById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
            },
            {
                "scopeName": "temp",
                "methodName": "getStatus",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
            },
            {
                "scopeName": "temp.getStatus()",
                "methodName": "equals",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
            }
        ],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "addRTable",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "RTable",
                        "variable": "rTable",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    if (rTableRepository.existsByNumber(rTable.getNumber())) {",
                    "        throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"Table with this number already exists.\");",
                    "    } else {",
                    "        rTable.setStatus(\"FREE\");",
                    "        rTableRepository.save(rTable);",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "updateRTable",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "RTable",
                        "variable": "rTable",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<RTable> oldRTable = rTableRepository.findById(id);",
                    "    if (!oldRTable.isPresent())",
                    "        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Table not found.\");",
                    "    else {",
                    "        rTable.setRTableId(id);",
                    "        rTableRepository.save(rTable);",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getRTablesBySize",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "List<RTable>",
                "parameters": [
                    {
                        "type": "int",
                        "variable": "size",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    return rTableRepository.findAllBySize(size);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "deleteRTableById",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    if (rTableRepository.findById(id).isPresent()) {",
                    "        rTableRepository.deleteById(id);",
                    "    } else {",
                    "        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Table not found.\");",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getRTableById",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Optional<RTable>",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<RTable> rTable = rTableRepository.findById(id);",
                    "    if (rTable.isPresent()) {",
                    "        return rTable;",
                    "    } else {",
                    "        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Table not found.\");",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getRTableBills",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "List<Bill>",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<RTable> rTable = getRTableById(id);",
                    "    return rTable.get().getBills();",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getRTableReservations",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "List<Reservation>",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<RTable> rTable = getRTableById(id);",
                    "    return rTable.get().getReservations();",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getRTables",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "List<RTable>",
                "parameters": [],
                "body": [
                    "{",
                    "    return rTableRepository.findAll();",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getCurrentBill",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Bill",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    List<Bill> bills = getRTableBills(id);",
                    "    Bill temp;",
                    "    for (int i = 0; i < bills.size(); i++) {",
                    "        temp = bills.get(i);",
                    "        if (temp.getStatus().equals(\"IN_PROGRESS\")) {",
                    "            return temp;",
                    "        }",
                    "    }",
                    "    throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Table don't have active bills.\");",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.entity",
        "begin": 1,
        "end": 95,
        "short_name": "RTable",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable",
        "annotations": [
            "@AllArgsConstructor",
            "@NoArgsConstructor",
            "@Entity",
            "@Builder"
        ],
        "dependencies": [
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill"
        ],
        "instance_variables": [
            {
                "annotations": [
                    "@Id",
                    "@GeneratedValue(strategy = GenerationType.IDENTITY)",
                    "@Column(name = \"RTABLE_ID\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "Long",
                "variable": "rTableId",
                "lineBegin": 16,
                "lineEnd": 19
            },
            {
                "annotations": [
                    "@NaturalId",
                    "@Column(name = \"NUMBER\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "int",
                "variable": "number",
                "lineBegin": 20,
                "lineEnd": 22
            },
            {
                "annotations": [
                    "@Column(name = \"SIZE\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "int",
                "variable": "size",
                "lineBegin": 23,
                "lineEnd": 24
            },
            {
                "annotations": [
                    "@Column(name = \"STATUS\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "status",
                "lineBegin": 25,
                "lineEnd": 26
            },
            {
                "annotations": [
                    "@OneToMany(orphanRemoval = true, cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = \"rTableId\")"
                ],
                "modifier": "private ",
                "identifier": [
                    "List",
                    "Reservation"
                ],
                "type": "List<Reservation>",
                "variable": "reservations",
                "lineBegin": 29,
                "lineEnd": 30
            },
            {
                "annotations": [
                    "@OneToMany(orphanRemoval = true, cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = \"rTableId\")"
                ],
                "modifier": "private ",
                "identifier": [
                    "List",
                    "Bill"
                ],
                "type": "List<Bill>",
                "variable": "bills",
                "lineBegin": 32,
                "lineEnd": 33
            }
        ],
        "methods": {
            "getBills": {
                "name": "getBills",
                "lineBegin": 82,
                "lineEnd": 84,
                "annotations": [],
                "returnDataType": [
                    "List<Bill>"
                ],
                "identifier": [
                    "List",
                    "Bill"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return bills;\n}",
                "methodInvocations": []
            },
            "getRTableId": {
                "name": "getRTableId",
                "lineBegin": 42,
                "lineEnd": 44,
                "annotations": [],
                "returnDataType": [
                    "Long"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return rTableId;\n}",
                "methodInvocations": []
            },
            "setReservations": {
                "name": "setReservations",
                "lineBegin": 78,
                "lineEnd": 80,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "List<Reservation>",
                        "variable": "reservations",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.reservations = reservations;\n}",
                "methodInvocations": []
            },
            "setBills": {
                "name": "setBills",
                "lineBegin": 86,
                "lineEnd": 88,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "List<Bill>",
                        "variable": "bills",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.bills = bills;\n}",
                "methodInvocations": []
            },
            "addBill": {
                "name": "addBill",
                "lineBegin": 90,
                "lineEnd": 92,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Bill",
                        "variable": "bill",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.bills.add(bill);\n}",
                "methodInvocations": []
            },
            "getStatus": {
                "name": "getStatus",
                "lineBegin": 66,
                "lineEnd": 68,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return status;\n}",
                "methodInvocations": []
            },
            "setNumber": {
                "name": "setNumber",
                "lineBegin": 54,
                "lineEnd": 56,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "int",
                        "variable": "number",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.number = number;\n}",
                "methodInvocations": []
            },
            "setStatus": {
                "name": "setStatus",
                "lineBegin": 70,
                "lineEnd": 72,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "status",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.status = status;\n}",
                "methodInvocations": []
            },
            "getNumber": {
                "name": "getNumber",
                "lineBegin": 50,
                "lineEnd": 52,
                "annotations": [],
                "returnDataType": [
                    "int"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return number;\n}",
                "methodInvocations": []
            },
            "getSize": {
                "name": "getSize",
                "lineBegin": 58,
                "lineEnd": 60,
                "annotations": [],
                "returnDataType": [
                    "int"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return size;\n}",
                "methodInvocations": []
            },
            "setSize": {
                "name": "setSize",
                "lineBegin": 62,
                "lineEnd": 64,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "int",
                        "variable": "size",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.size = size;\n}",
                "methodInvocations": []
            },
            "setRTableId": {
                "name": "setRTableId",
                "lineBegin": 46,
                "lineEnd": 48,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "rTableId",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.rTableId = rTableId;\n}",
                "methodInvocations": []
            },
            "getReservations": {
                "name": "getReservations",
                "lineBegin": 74,
                "lineEnd": 76,
                "annotations": [],
                "returnDataType": [
                    "List<Reservation>"
                ],
                "identifier": [
                    "List",
                    "Reservation"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return reservations;\n}",
                "methodInvocations": []
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.AllArgsConstructor",
            "lombok.Builder",
            "lombok.NoArgsConstructor",
            "org.hibernate.annotations.NaturalId",
            "javax.persistence",
            "java.util.List"
        ],
        "methodsInvocations": [],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "getBills",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "List<Bill>",
                "parameters": [],
                "body": [
                    "{",
                    "    return bills;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getRTableId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Long",
                "parameters": [],
                "body": [
                    "{",
                    "    return rTableId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setReservations",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "List<Reservation>",
                        "variable": "reservations",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.reservations = reservations;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setBills",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "List<Bill>",
                        "variable": "bills",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.bills = bills;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "addBill",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Bill",
                        "variable": "bill",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.bills.add(bill);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getStatus",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return status;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setNumber",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "int",
                        "variable": "number",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.number = number;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setStatus",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "status",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.status = status;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getNumber",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "int",
                "parameters": [],
                "body": [
                    "{",
                    "    return number;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getSize",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "int",
                "parameters": [],
                "body": [
                    "{",
                    "    return size;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setSize",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "int",
                        "variable": "size",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.size = size;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setRTableId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "rTableId",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.rTableId = rTableId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getReservations",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "List<Reservation>",
                "parameters": [],
                "body": [
                    "{",
                    "    return reservations;",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.controller.RTableController": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.controller.RTableController",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.controller",
        "begin": 1,
        "end": 68,
        "short_name": "RTableController",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.controller.RTableController",
        "annotations": [
            "@AllArgsConstructor",
            "@RestController",
            "@CrossOrigin"
        ],
        "dependencies": [
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
        ],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "RTableService",
                "variable": "rTableService",
                "lineBegin": 18,
                "lineEnd": 18
            }
        ],
        "methods": {
            "addRTable": {
                "name": "addRTable",
                "lineBegin": 49,
                "lineEnd": 52,
                "annotations": [
                    "@PostMapping(\"/rTables\")"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "RTable",
                        "variable": "rTable",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    rTableService.addRTable(rTable);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "rTableService",
                        "methodName": "addRTable",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
                    }
                ]
            },
            "updateRTable": {
                "name": "updateRTable",
                "lineBegin": 54,
                "lineEnd": 58,
                "annotations": [
                    "@PutMapping(\"/rTables/{id}\")"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "RTable",
                        "variable": "rTable",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    rTableService.updateRTable(id, rTable);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "rTableService",
                        "methodName": "updateRTable",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
                    }
                ]
            },
            "deleteRTable": {
                "name": "deleteRTable",
                "lineBegin": 60,
                "lineEnd": 64,
                "annotations": [
                    "@DeleteMapping(\"/rTables/{id}\")"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<RTable>",
                        "variable": "rTable",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    }
                ],
                "body": "{\n    Optional<RTable> rTable = rTableService.getRTableById(id);\n    rTableService.deleteRTableById(id);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "rTableService",
                        "methodName": "getRTableById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
                    },
                    {
                        "scopeName": "rTableService",
                        "methodName": "deleteRTableById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
                    }
                ]
            },
            "getRTableById": {
                "name": "getRTableById",
                "lineBegin": 27,
                "lineEnd": 31,
                "annotations": [
                    "@GetMapping(value = \"/rTables/{id}\")"
                ],
                "returnDataType": [
                    "RTable"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<RTable>",
                        "variable": "rTable",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    }
                ],
                "body": "{\n    Optional<RTable> rTable = rTableService.getRTableById(id);\n    return rTable.orElse(null);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "rTableService",
                        "methodName": "getRTableById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
                    },
                    {
                        "scopeName": "rTable",
                        "methodName": "orElse",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    }
                ]
            },
            "getRTableBills": {
                "name": "getRTableBills",
                "lineBegin": 39,
                "lineEnd": 42,
                "annotations": [
                    "@GetMapping(value = \"/rTables/{id}/bills\")"
                ],
                "returnDataType": [
                    "Collection<Bill>"
                ],
                "identifier": [
                    "Collection",
                    "Bill"
                ],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    return rTableService.getRTableBills(id);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "rTableService",
                        "methodName": "getRTableBills",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
                    }
                ]
            },
            "getRTableReservations": {
                "name": "getRTableReservations",
                "lineBegin": 34,
                "lineEnd": 37,
                "annotations": [
                    "@GetMapping(value = \"/rTables/{id}/reservations\")"
                ],
                "returnDataType": [
                    "Collection<Reservation>"
                ],
                "identifier": [
                    "Collection",
                    "Reservation"
                ],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    return rTableService.getRTableReservations(id);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "rTableService",
                        "methodName": "getRTableReservations",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
                    }
                ]
            },
            "getRTables": {
                "name": "getRTables",
                "lineBegin": 21,
                "lineEnd": 24,
                "annotations": [
                    "@GetMapping(\"/rTables\")"
                ],
                "returnDataType": [
                    "Collection<RTable>"
                ],
                "identifier": [
                    "Collection",
                    "RTable"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return rTableService.getRTables();\n}",
                "methodInvocations": [
                    {
                        "scopeName": "rTableService",
                        "methodName": "getRTables",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
                    }
                ]
            },
            "getCurrentBill": {
                "name": "getCurrentBill",
                "lineBegin": 44,
                "lineEnd": 47,
                "annotations": [
                    "@GetMapping(value = \"/rTables/{id}/currentBill\")"
                ],
                "returnDataType": [
                    "Bill"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    return rTableService.getCurrentBill(id);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "rTableService",
                        "methodName": "getCurrentBill",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
                    }
                ]
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.AllArgsConstructor",
            "org.springframework.web.bind.annotation",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Bill",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation",
            "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService",
            "java.util.Collection",
            "java.util.Optional"
        ],
        "methodsInvocations": [
            {
                "scopeName": "rTableService",
                "methodName": "getRTables",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
            },
            {
                "scopeName": "rTableService",
                "methodName": "getRTableById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
            },
            {
                "scopeName": "rTableService",
                "methodName": "getRTableReservations",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
            },
            {
                "scopeName": "rTableService",
                "methodName": "getRTableBills",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
            },
            {
                "scopeName": "rTableService",
                "methodName": "getCurrentBill",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
            },
            {
                "scopeName": "rTableService",
                "methodName": "addRTable",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
            },
            {
                "scopeName": "rTableService",
                "methodName": "updateRTable",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
            },
            {
                "scopeName": "rTableService",
                "methodName": "getRTableById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
            },
            {
                "scopeName": "rTableService",
                "methodName": "deleteRTableById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
            }
        ],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "addRTable",
                "annotations": [
                    "@PostMapping(\"/rTables\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "RTable",
                        "variable": "rTable",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    rTableService.addRTable(rTable);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "updateRTable",
                "annotations": [
                    "@PutMapping(\"/rTables/{id}\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "RTable",
                        "variable": "rTable",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    rTableService.updateRTable(id, rTable);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "deleteRTable",
                "annotations": [
                    "@DeleteMapping(\"/rTables/{id}\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<RTable> rTable = rTableService.getRTableById(id);",
                    "    rTableService.deleteRTableById(id);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getRTableById",
                "annotations": [
                    "@GetMapping(value = \"/rTables/{id}\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "RTable",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<RTable> rTable = rTableService.getRTableById(id);",
                    "    return rTable.orElse(null);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getRTableBills",
                "annotations": [
                    "@GetMapping(value = \"/rTables/{id}/bills\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "Collection<Bill>",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    return rTableService.getRTableBills(id);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getRTableReservations",
                "annotations": [
                    "@GetMapping(value = \"/rTables/{id}/reservations\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "Collection<Reservation>",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    return rTableService.getRTableReservations(id);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getRTables",
                "annotations": [
                    "@GetMapping(\"/rTables\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "Collection<RTable>",
                "parameters": [],
                "body": [
                    "{",
                    "    return rTableService.getRTables();",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getCurrentBill",
                "annotations": [
                    "@GetMapping(value = \"/rTables/{id}/currentBill\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "Bill",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    return rTableService.getCurrentBill(id);",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.repository",
        "begin": 1,
        "end": 18,
        "short_name": "RTableRepository",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository",
        "annotations": [
            "@Transactional",
            "@Repository"
        ],
        "dependencies": [],
        "instance_variables": [],
        "methods": {
            "findAllBySize": {
                "name": "findAllBySize",
                "lineBegin": 17,
                "lineEnd": 17,
                "annotations": [],
                "returnDataType": [
                    "List<RTable>"
                ],
                "identifier": [
                    "List",
                    "RTable"
                ],
                "parametersDataType": [
                    {
                        "type": "int",
                        "variable": "size",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "",
                "methodInvocations": []
            },
            "existsBySize": {
                "name": "existsBySize",
                "lineBegin": 15,
                "lineEnd": 15,
                "annotations": [],
                "returnDataType": [
                    "boolean"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "int",
                        "variable": "size",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "",
                "methodInvocations": []
            },
            "existsByNumber": {
                "name": "existsByNumber",
                "lineBegin": 13,
                "lineEnd": 13,
                "annotations": [],
                "returnDataType": [
                    "boolean"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "int",
                        "variable": "number",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "",
                "methodInvocations": []
            }
        },
        "implements": [],
        "extends": [
            "JpaRepository<RTable, Long>"
        ],
        "imports": [
            "org.springframework.data.jpa.repository.JpaRepository",
            "org.springframework.stereotype.Repository",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable",
            "javax.transaction.Transactional",
            "java.util.List"
        ],
        "methodsInvocations": [],
        "isInterface": true,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "findAllBySize",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "List<RTable>",
                "parameters": [
                    {
                        "type": "int",
                        "variable": "size",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    ""
                ],
                "exceptions": []
            },
            {
                "name": "existsBySize",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "boolean",
                "parameters": [
                    {
                        "type": "int",
                        "variable": "size",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    ""
                ],
                "exceptions": []
            },
            {
                "name": "existsByNumber",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "boolean",
                "parameters": [
                    {
                        "type": "int",
                        "variable": "number",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    ""
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.entity",
        "begin": 1,
        "end": 75,
        "short_name": "Dish",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish",
        "annotations": [
            "@AllArgsConstructor",
            "@NoArgsConstructor",
            "@Entity",
            "@Builder"
        ],
        "dependencies": [],
        "instance_variables": [
            {
                "annotations": [
                    "@Id",
                    "@GeneratedValue(strategy = GenerationType.IDENTITY)",
                    "@Column(name = \"DISH_ID\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "Long",
                "variable": "dishId",
                "lineBegin": 15,
                "lineEnd": 18
            },
            {
                "annotations": [
                    "@Column(name = \"ENGLISH_NAME\", length = 50)"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "englishName",
                "lineBegin": 19,
                "lineEnd": 20
            },
            {
                "annotations": [
                    "@Column(name = \"POLISH_NAME\", length = 50)"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "polishName",
                "lineBegin": 21,
                "lineEnd": 22
            },
            {
                "annotations": [
                    "@Column(name = \"PRICE\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "double",
                "variable": "price",
                "lineBegin": 23,
                "lineEnd": 24
            },
            {
                "annotations": [
                    "@Column(name = \"IMAGE\")",
                    "@Type(type = \"text\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "image",
                "lineBegin": 25,
                "lineEnd": 27
            }
        ],
        "methods": {
            "getDishId": {
                "name": "getDishId",
                "lineBegin": 36,
                "lineEnd": 38,
                "annotations": [],
                "returnDataType": [
                    "Long"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return dishId;\n}",
                "methodInvocations": []
            },
            "getEnglishName": {
                "name": "getEnglishName",
                "lineBegin": 44,
                "lineEnd": 46,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return englishName;\n}",
                "methodInvocations": []
            },
            "getPolishName": {
                "name": "getPolishName",
                "lineBegin": 52,
                "lineEnd": 54,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return polishName;\n}",
                "methodInvocations": []
            },
            "setPolishName": {
                "name": "setPolishName",
                "lineBegin": 56,
                "lineEnd": 58,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "polishName",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.polishName = polishName;\n}",
                "methodInvocations": []
            },
            "setDishId": {
                "name": "setDishId",
                "lineBegin": 40,
                "lineEnd": 42,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "dishId",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.dishId = dishId;\n}",
                "methodInvocations": []
            },
            "setPrice": {
                "name": "setPrice",
                "lineBegin": 64,
                "lineEnd": 66,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "double",
                        "variable": "price",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.price = price;\n}",
                "methodInvocations": []
            },
            "getImage": {
                "name": "getImage",
                "lineBegin": 68,
                "lineEnd": 70,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return image;\n}",
                "methodInvocations": []
            },
            "getPrice": {
                "name": "getPrice",
                "lineBegin": 60,
                "lineEnd": 62,
                "annotations": [],
                "returnDataType": [
                    "double"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return this.price;\n}",
                "methodInvocations": []
            },
            "setEnglishName": {
                "name": "setEnglishName",
                "lineBegin": 48,
                "lineEnd": 50,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "englishName",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.englishName = englishName;\n}",
                "methodInvocations": []
            },
            "setImage": {
                "name": "setImage",
                "lineBegin": 72,
                "lineEnd": 74,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "image",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.image = image;\n}",
                "methodInvocations": []
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.AllArgsConstructor",
            "lombok.Builder",
            "lombok.NoArgsConstructor",
            "org.hibernate.annotations.Type",
            "javax.persistence"
        ],
        "methodsInvocations": [],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "getDishId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Long",
                "parameters": [],
                "body": [
                    "{",
                    "    return dishId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getEnglishName",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return englishName;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getPolishName",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return polishName;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setPolishName",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "polishName",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.polishName = polishName;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setDishId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "dishId",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.dishId = dishId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setPrice",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "double",
                        "variable": "price",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.price = price;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getImage",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return image;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getPrice",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "double",
                "parameters": [],
                "body": [
                    "{",
                    "    return this.price;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setEnglishName",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "englishName",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.englishName = englishName;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setImage",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "image",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.image = image;",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.RestaurantServerApplication": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.RestaurantServerApplication",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer",
        "begin": 1,
        "end": 93,
        "short_name": "RestaurantServerApplication",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.RestaurantServerApplication",
        "annotations": [
            "@SpringBootApplication"
        ],
        "dependencies": [
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Role",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.User",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable",
            "pl.edu.wat.wcy.pz.restaurantServer.repository.RoleRepository",
            "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository",
            "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
        ],
        "instance_variables": [],
        "methods": {
            "init": {
                "name": "init",
                "lineBegin": 30,
                "lineEnd": 90,
                "annotations": [
                    "@Bean"
                ],
                "returnDataType": [
                    "ApplicationRunner"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "RoleRepository",
                        "variable": "roleRepository",
                        "qualifedType": ""
                    },
                    {
                        "type": "UserRepository",
                        "variable": "userRepository",
                        "qualifedType": ""
                    },
                    {
                        "type": "RTableRepository",
                        "variable": "tableRepository",
                        "qualifedType": ""
                    },
                    {
                        "type": "DishRepository",
                        "variable": "dishRepository",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Role",
                        "variable": "role",
                        "qualifedType": ""
                    },
                    {
                        "type": "Role",
                        "variable": "role2",
                        "qualifedType": ""
                    },
                    {
                        "type": "Role",
                        "variable": "role3",
                        "qualifedType": ""
                    },
                    {
                        "type": "Set<Role>",
                        "variable": "roles",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Role"
                    },
                    {
                        "type": "User",
                        "variable": "worker",
                        "qualifedType": ""
                    },
                    {
                        "type": "User",
                        "variable": "admin",
                        "qualifedType": ""
                    },
                    {
                        "type": "byte[]",
                        "variable": "fileContent",
                        "qualifedType": ""
                    },
                    {
                        "type": "Dish",
                        "variable": "dish1",
                        "qualifedType": ""
                    },
                    {
                        "type": "Dish",
                        "variable": "dish2",
                        "qualifedType": ""
                    },
                    {
                        "type": "Dish",
                        "variable": "dish3",
                        "qualifedType": ""
                    },
                    {
                        "type": "Dish",
                        "variable": "dish4",
                        "qualifedType": ""
                    },
                    {
                        "type": "Dish",
                        "variable": "dish5",
                        "qualifedType": ""
                    },
                    {
                        "type": "Dish",
                        "variable": "dish6",
                        "qualifedType": ""
                    },
                    {
                        "type": "Dish",
                        "variable": "dish7",
                        "qualifedType": ""
                    },
                    {
                        "type": "Dish",
                        "variable": "dish8",
                        "qualifedType": ""
                    },
                    {
                        "type": "RTable",
                        "variable": "rTable1",
                        "qualifedType": ""
                    },
                    {
                        "type": "RTable",
                        "variable": "rTable2",
                        "qualifedType": ""
                    },
                    {
                        "type": "RTable",
                        "variable": "rTable3",
                        "qualifedType": ""
                    },
                    {
                        "type": "RTable",
                        "variable": "rTable4",
                        "qualifedType": ""
                    },
                    {
                        "type": "RTable",
                        "variable": "rTable5",
                        "qualifedType": ""
                    },
                    {
                        "type": "RTable",
                        "variable": "rTable6",
                        "qualifedType": ""
                    }
                ],
                "body": "{\n    return args -> {\n        Role role = new Role(1L, \"ADMIN\");\n        Role role2 = new Role(2L, \"WORKER\");\n        Role role3 = new Role(3L, \"USER\");\n        roleRepository.save(role);\n        roleRepository.save(role2);\n        roleRepository.save(role3);\n        Set<Role> roles = new HashSet<>();\n        roles.add(role3);\n        roles.add(role2);\n        User worker = new User(\"w@w.pl\", \"Worker\", \"Worker\", \"$2a$10$ELwxAkpJa2daHpaIKkY/XOeq8FxyyRQhIfjOvv3FU.I4NLBOciMP.\", roles);\n        userRepository.save(worker);\n        roles.add(role);\n        User admin = new User(\"a@a.pl\", \"Admin\", \"Admin\", \"$2a$10$ELwxAkpJa2daHpaIKkY/XOeq8FxyyRQhIfjOvv3FU.I4NLBOciMP.\", roles);\n        userRepository.save(admin);\n        byte[] fileContent = FileUtils.readFileToByteArray(new File(\"src/main/resources/images/sausage.png\"));\n        Dish dish1 = new Dish(\"Sausage\", \"Kie\u00c5\u201abasa\", 14.99, Base64.getEncoder().encodeToString(fileContent));\n        fileContent = FileUtils.readFileToByteArray(new File(\"src/main/resources/images/orangejuice.png\"));\n        Dish dish2 = new Dish(\"Orange juice\", \"Sok pomara\u00c5\u201eczowy\", 6.00, Base64.getEncoder().encodeToString(fileContent));\n        fileContent = FileUtils.readFileToByteArray(new File(\"src/main/resources/images/beef.png\"));\n        Dish dish3 = new Dish(\"Beef\", \"Wo\u00c5\u201aowina\", 24.99, Base64.getEncoder().encodeToString(fileContent));\n        fileContent = FileUtils.readFileToByteArray(new File(\"src/main/resources/images/porkchops.png\"));\n        Dish dish4 = new Dish(\"Pork chops\", \"Kotlety schabowe\", 19.99, Base64.getEncoder().encodeToString(fileContent));\n        fileContent = FileUtils.readFileToByteArray(new File(\"src/main/resources/images/water.png\"));\n        Dish dish5 = new Dish(\"Water\", \"Woda\", 2.50, Base64.getEncoder().encodeToString(fileContent));\n        fileContent = FileUtils.readFileToByteArray(new File(\"src/main/resources/images/fish.png\"));\n        Dish dish6 = new Dish(\"Fish and chips\", \"Ryba z frytkami\", 18.99, Base64.getEncoder().encodeToString(fileContent));\n        fileContent = FileUtils.readFileToByteArray(new File(\"src/main/resources/images/chicken.png\"));\n        Dish dish7 = new Dish(\"Grilled chicken\", \"Grilowany kurczak\", 15.00, Base64.getEncoder().encodeToString(fileContent));\n        fileContent = FileUtils.readFileToByteArray(new File(\"src/main/resources/images/spaghetti.png\"));\n        Dish dish8 = new Dish(\"Spaghetti bolognese\", \"Spaghetti bolo\u00c5\u201eskie\", 13.50, Base64.getEncoder().encodeToString(fileContent));\n        dishRepository.save(dish1);\n        dishRepository.save(dish2);\n        dishRepository.save(dish3);\n        dishRepository.save(dish4);\n        dishRepository.save(dish5);\n        dishRepository.save(dish6);\n        dishRepository.save(dish7);\n        dishRepository.save(dish8);\n        RTable rTable1 = new RTable(1, 3, \"FREE\");\n        RTable rTable2 = new RTable(2, 3, \"FREE\");\n        RTable rTable3 = new RTable(3, 4, \"FREE\");\n        RTable rTable4 = new RTable(4, 4, \"FREE\");\n        RTable rTable5 = new RTable(5, 2, \"FREE\");\n        RTable rTable6 = new RTable(6, 2, \"FREE\");\n        tableRepository.save(rTable1);\n        tableRepository.save(rTable2);\n        tableRepository.save(rTable3);\n        tableRepository.save(rTable4);\n        tableRepository.save(rTable5);\n        tableRepository.save(rTable6);\n    };\n}",
                "methodInvocations": [
                    {
                        "scopeName": "roleRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RoleRepository"
                    },
                    {
                        "scopeName": "roleRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RoleRepository"
                    },
                    {
                        "scopeName": "roleRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RoleRepository"
                    },
                    {
                        "scopeName": "roles",
                        "methodName": "add",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Role"
                    },
                    {
                        "scopeName": "roles",
                        "methodName": "add",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Role"
                    },
                    {
                        "scopeName": "userRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
                    },
                    {
                        "scopeName": "roles",
                        "methodName": "add",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Role"
                    },
                    {
                        "scopeName": "userRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
                    },
                    {
                        "scopeName": "dishRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
                    },
                    {
                        "scopeName": "dishRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
                    },
                    {
                        "scopeName": "dishRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
                    },
                    {
                        "scopeName": "dishRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
                    },
                    {
                        "scopeName": "dishRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
                    },
                    {
                        "scopeName": "dishRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
                    },
                    {
                        "scopeName": "dishRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
                    },
                    {
                        "scopeName": "dishRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
                    },
                    {
                        "scopeName": "tableRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
                    },
                    {
                        "scopeName": "tableRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
                    },
                    {
                        "scopeName": "tableRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
                    },
                    {
                        "scopeName": "tableRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
                    },
                    {
                        "scopeName": "tableRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
                    },
                    {
                        "scopeName": "tableRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
                    }
                ]
            },
            "main": {
                "name": "main",
                "lineBegin": 26,
                "lineEnd": 28,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String[]",
                        "variable": "args",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    SpringApplication.run(RestaurantServerApplication.class, args);\n}",
                "methodInvocations": []
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "org.apache.commons.io.FileUtils",
            "org.springframework.boot.ApplicationRunner",
            "org.springframework.boot.SpringApplication",
            "org.springframework.boot.autoconfigure.SpringBootApplication",
            "org.springframework.context.annotation.Bean",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Role",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.User",
            "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository",
            "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository",
            "pl.edu.wat.wcy.pz.restaurantServer.repository.RoleRepository",
            "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository",
            "java.io.File",
            "java.net.URL",
            "java.util.Base64",
            "java.util.HashSet",
            "java.util.Set"
        ],
        "methodsInvocations": [
            {
                "scopeName": "roleRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RoleRepository"
            },
            {
                "scopeName": "roleRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RoleRepository"
            },
            {
                "scopeName": "roleRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RoleRepository"
            },
            {
                "scopeName": "userRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
            },
            {
                "scopeName": "userRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
            },
            {
                "scopeName": "dishRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
            },
            {
                "scopeName": "dishRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
            },
            {
                "scopeName": "dishRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
            },
            {
                "scopeName": "dishRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
            },
            {
                "scopeName": "dishRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
            },
            {
                "scopeName": "dishRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
            },
            {
                "scopeName": "dishRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
            },
            {
                "scopeName": "dishRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
            },
            {
                "scopeName": "tableRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
            },
            {
                "scopeName": "tableRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
            },
            {
                "scopeName": "tableRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
            },
            {
                "scopeName": "tableRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
            },
            {
                "scopeName": "tableRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
            },
            {
                "scopeName": "tableRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RTableRepository"
            }
        ],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "init",
                "annotations": [
                    "@Bean"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "ApplicationRunner",
                "parameters": [
                    {
                        "type": "RoleRepository",
                        "variable": "roleRepository",
                        "qualifedType": ""
                    },
                    {
                        "type": "UserRepository",
                        "variable": "userRepository",
                        "qualifedType": ""
                    },
                    {
                        "type": "RTableRepository",
                        "variable": "tableRepository",
                        "qualifedType": ""
                    },
                    {
                        "type": "DishRepository",
                        "variable": "dishRepository",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    return args -> {",
                    "        Role role = new Role(1L, \"ADMIN\");",
                    "        Role role2 = new Role(2L, \"WORKER\");",
                    "        Role role3 = new Role(3L, \"USER\");",
                    "        roleRepository.save(role);",
                    "        roleRepository.save(role2);",
                    "        roleRepository.save(role3);",
                    "        Set<Role> roles = new HashSet<>();",
                    "        roles.add(role3);",
                    "        roles.add(role2);",
                    "        User worker = new User(\"w@w.pl\", \"Worker\", \"Worker\", \"$2a$10$ELwxAkpJa2daHpaIKkY/XOeq8FxyyRQhIfjOvv3FU.I4NLBOciMP.\", roles);",
                    "        userRepository.save(worker);",
                    "        roles.add(role);",
                    "        User admin = new User(\"a@a.pl\", \"Admin\", \"Admin\", \"$2a$10$ELwxAkpJa2daHpaIKkY/XOeq8FxyyRQhIfjOvv3FU.I4NLBOciMP.\", roles);",
                    "        userRepository.save(admin);",
                    "        byte[] fileContent = FileUtils.readFileToByteArray(new File(\"src/main/resources/images/sausage.png\"));",
                    "        Dish dish1 = new Dish(\"Sausage\", \"Kie\u00c5\u201abasa\", 14.99, Base64.getEncoder().encodeToString(fileContent));",
                    "        fileContent = FileUtils.readFileToByteArray(new File(\"src/main/resources/images/orangejuice.png\"));",
                    "        Dish dish2 = new Dish(\"Orange juice\", \"Sok pomara\u00c5\u201eczowy\", 6.00, Base64.getEncoder().encodeToString(fileContent));",
                    "        fileContent = FileUtils.readFileToByteArray(new File(\"src/main/resources/images/beef.png\"));",
                    "        Dish dish3 = new Dish(\"Beef\", \"Wo\u00c5\u201aowina\", 24.99, Base64.getEncoder().encodeToString(fileContent));",
                    "        fileContent = FileUtils.readFileToByteArray(new File(\"src/main/resources/images/porkchops.png\"));",
                    "        Dish dish4 = new Dish(\"Pork chops\", \"Kotlety schabowe\", 19.99, Base64.getEncoder().encodeToString(fileContent));",
                    "        fileContent = FileUtils.readFileToByteArray(new File(\"src/main/resources/images/water.png\"));",
                    "        Dish dish5 = new Dish(\"Water\", \"Woda\", 2.50, Base64.getEncoder().encodeToString(fileContent));",
                    "        fileContent = FileUtils.readFileToByteArray(new File(\"src/main/resources/images/fish.png\"));",
                    "        Dish dish6 = new Dish(\"Fish and chips\", \"Ryba z frytkami\", 18.99, Base64.getEncoder().encodeToString(fileContent));",
                    "        fileContent = FileUtils.readFileToByteArray(new File(\"src/main/resources/images/chicken.png\"));",
                    "        Dish dish7 = new Dish(\"Grilled chicken\", \"Grilowany kurczak\", 15.00, Base64.getEncoder().encodeToString(fileContent));",
                    "        fileContent = FileUtils.readFileToByteArray(new File(\"src/main/resources/images/spaghetti.png\"));",
                    "        Dish dish8 = new Dish(\"Spaghetti bolognese\", \"Spaghetti bolo\u00c5\u201eskie\", 13.50, Base64.getEncoder().encodeToString(fileContent));",
                    "        dishRepository.save(dish1);",
                    "        dishRepository.save(dish2);",
                    "        dishRepository.save(dish3);",
                    "        dishRepository.save(dish4);",
                    "        dishRepository.save(dish5);",
                    "        dishRepository.save(dish6);",
                    "        dishRepository.save(dish7);",
                    "        dishRepository.save(dish8);",
                    "        RTable rTable1 = new RTable(1, 3, \"FREE\");",
                    "        RTable rTable2 = new RTable(2, 3, \"FREE\");",
                    "        RTable rTable3 = new RTable(3, 4, \"FREE\");",
                    "        RTable rTable4 = new RTable(4, 4, \"FREE\");",
                    "        RTable rTable5 = new RTable(5, 2, \"FREE\");",
                    "        RTable rTable6 = new RTable(6, 2, \"FREE\");",
                    "        tableRepository.save(rTable1);",
                    "        tableRepository.save(rTable2);",
                    "        tableRepository.save(rTable3);",
                    "        tableRepository.save(rTable4);",
                    "        tableRepository.save(rTable5);",
                    "        tableRepository.save(rTable6);",
                    "    };",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "main",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String[]",
                        "variable": "args",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    SpringApplication.run(RestaurantServerApplication.class, args);",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.repository",
        "begin": 1,
        "end": 13,
        "short_name": "DishRepository",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository",
        "annotations": [
            "@Transactional",
            "@Repository"
        ],
        "dependencies": [],
        "instance_variables": [],
        "methods": {},
        "implements": [],
        "extends": [
            "JpaRepository<Dish, Long>"
        ],
        "imports": [
            "org.springframework.data.jpa.repository.JpaRepository",
            "org.springframework.stereotype.Repository",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish",
            "javax.transaction.Transactional"
        ],
        "methodsInvocations": [],
        "isInterface": true,
        "myInterfaces": [],
        "myMethods": [],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.service.DishService": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.service.DishService",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.service",
        "begin": 1,
        "end": 82,
        "short_name": "DishService",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.service.DishService",
        "annotations": [
            "@AllArgsConstructor",
            "@Service"
        ],
        "dependencies": [],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "DishRepository",
                "variable": "dishRepository",
                "lineBegin": 18,
                "lineEnd": 18
            }
        ],
        "methods": {
            "getDishById": {
                "name": "getDishById",
                "lineBegin": 38,
                "lineEnd": 46,
                "annotations": [],
                "returnDataType": [
                    "Optional<Dish>"
                ],
                "identifier": [
                    "Optional",
                    "Dish"
                ],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<Dish>",
                        "variable": "dish",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    }
                ],
                "body": "{\n    Optional<Dish> dish = dishRepository.findById(id);\n    if (dish.isPresent()) {\n        return dish;\n    } else {\n        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Dish not found.\");\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "dishRepository",
                        "methodName": "findById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
                    },
                    {
                        "scopeName": "dish",
                        "methodName": "isPresent",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    }
                ]
            },
            "updateDish": {
                "name": "updateDish",
                "lineBegin": 59,
                "lineEnd": 70,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "Dish",
                        "variable": "dish",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<Dish>",
                        "variable": "oldDish",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    }
                ],
                "body": "{\n    Optional<Dish> oldDish = dishRepository.findById(id);\n    if (!oldDish.isPresent())\n        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Dish not found.\");\n    else {\n        dish.setDishId(id);\n        dishRepository.save(dish);\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "dishRepository",
                        "methodName": "findById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
                    },
                    {
                        "scopeName": "oldDish",
                        "methodName": "isPresent",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    },
                    {
                        "scopeName": "dish",
                        "methodName": "setDishId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    },
                    {
                        "scopeName": "dishRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
                    }
                ]
            },
            "getDishes": {
                "name": "getDishes",
                "lineBegin": 20,
                "lineEnd": 22,
                "annotations": [],
                "returnDataType": [
                    "List<Dish>"
                ],
                "identifier": [
                    "List",
                    "Dish"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return dishRepository.findAll();\n}",
                "methodInvocations": [
                    {
                        "scopeName": "dishRepository",
                        "methodName": "findAll",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
                    }
                ]
            },
            "addDish": {
                "name": "addDish",
                "lineBegin": 48,
                "lineEnd": 57,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Dish",
                        "variable": "dish",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "List<Dish>",
                        "variable": "dishList",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    }
                ],
                "body": "{\n    List<Dish> dishList = dishRepository.findAll();\n    if (dishList.stream().map(Dish::getEnglishName).anyMatch(dish.getEnglishName()::equals) || dishList.stream().map(Dish::getPolishName).anyMatch(dish.getPolishName()::equals)) {\n        throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"Dish with this name already exists.\");\n    } else {\n        dishRepository.save(dish);\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "dishRepository",
                        "methodName": "findAll",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
                    },
                    {
                        "scopeName": "dish",
                        "methodName": "getEnglishName",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    },
                    {
                        "scopeName": "dishList",
                        "methodName": "stream",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    },
                    {
                        "scopeName": "dishList.stream()",
                        "methodName": "map",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    },
                    {
                        "scopeName": "dish",
                        "methodName": "getPolishName",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    },
                    {
                        "scopeName": "dishList",
                        "methodName": "stream",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    },
                    {
                        "scopeName": "dishList.stream()",
                        "methodName": "map",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    },
                    {
                        "scopeName": "dishRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
                    }
                ]
            },
            "deleteDishById": {
                "name": "deleteDishById",
                "lineBegin": 72,
                "lineEnd": 79,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    if (dishRepository.findById(id).isPresent()) {\n        dishRepository.deleteById(id);\n    } else {\n        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Dish not found.\");\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "dishRepository",
                        "methodName": "findById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
                    },
                    {
                        "scopeName": "dishRepository",
                        "methodName": "deleteById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
                    }
                ]
            },
            "findDishes": {
                "name": "findDishes",
                "lineBegin": 24,
                "lineEnd": 36,
                "annotations": [],
                "returnDataType": [
                    "List<Dish>"
                ],
                "identifier": [
                    "List",
                    "Dish"
                ],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "term",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "List<Dish>",
                        "variable": "dishes",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    },
                    {
                        "type": "List<Dish>",
                        "variable": "returnDishes",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    },
                    {
                        "type": "Dish",
                        "variable": "temp",
                        "qualifedType": ""
                    },
                    {
                        "type": "int",
                        "variable": "i",
                        "qualifedType": ""
                    }
                ],
                "body": "{\n    term = term.toLowerCase();\n    List<Dish> dishes = getDishes();\n    List<Dish> returnDishes = new ArrayList<>();\n    Dish temp;\n    for (int i = 0; i < dishes.size(); i++) {\n        temp = dishes.get(i);\n        if (temp.getEnglishName().toLowerCase().contains(term)) {\n            returnDishes.add(temp);\n        }\n    }\n    return returnDishes;\n}",
                "methodInvocations": [
                    {
                        "scopeName": "dishes",
                        "methodName": "get",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    },
                    {
                        "scopeName": "temp",
                        "methodName": "getEnglishName",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    },
                    {
                        "scopeName": "temp.getEnglishName()",
                        "methodName": "toLowerCase",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    },
                    {
                        "scopeName": "temp.getEnglishName().toLowerCase()",
                        "methodName": "contains",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    },
                    {
                        "scopeName": "returnDishes",
                        "methodName": "add",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    },
                    {
                        "scopeName": "dishes",
                        "methodName": "size",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    }
                ]
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.AllArgsConstructor",
            "org.springframework.http.HttpStatus",
            "org.springframework.stereotype.Service",
            "org.springframework.web.server.ResponseStatusException",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish",
            "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository",
            "java.util.ArrayList",
            "java.util.List",
            "java.util.Optional"
        ],
        "methodsInvocations": [
            {
                "scopeName": "dishRepository",
                "methodName": "findAll",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
            },
            {
                "scopeName": "temp",
                "methodName": "getEnglishName",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
            },
            {
                "scopeName": "temp.getEnglishName()",
                "methodName": "toLowerCase",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
            },
            {
                "scopeName": "temp.getEnglishName().toLowerCase()",
                "methodName": "contains",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
            },
            {
                "scopeName": "dishRepository",
                "methodName": "findById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
            },
            {
                "scopeName": "dishRepository",
                "methodName": "findAll",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
            },
            {
                "scopeName": "dish",
                "methodName": "getEnglishName",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
            },
            {
                "scopeName": "dish",
                "methodName": "getPolishName",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
            },
            {
                "scopeName": "dishRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
            },
            {
                "scopeName": "dishRepository",
                "methodName": "findById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
            },
            {
                "scopeName": "dish",
                "methodName": "setDishId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
            },
            {
                "scopeName": "dishRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
            },
            {
                "scopeName": "dishRepository",
                "methodName": "findById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
            },
            {
                "scopeName": "dishRepository",
                "methodName": "deleteById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.DishRepository"
            }
        ],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "getDishById",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Optional<Dish>",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<Dish> dish = dishRepository.findById(id);",
                    "    if (dish.isPresent()) {",
                    "        return dish;",
                    "    } else {",
                    "        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Dish not found.\");",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "updateDish",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "Dish",
                        "variable": "dish",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<Dish> oldDish = dishRepository.findById(id);",
                    "    if (!oldDish.isPresent())",
                    "        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Dish not found.\");",
                    "    else {",
                    "        dish.setDishId(id);",
                    "        dishRepository.save(dish);",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getDishes",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "List<Dish>",
                "parameters": [],
                "body": [
                    "{",
                    "    return dishRepository.findAll();",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "addDish",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Dish",
                        "variable": "dish",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    List<Dish> dishList = dishRepository.findAll();",
                    "    if (dishList.stream().map(Dish::getEnglishName).anyMatch(dish.getEnglishName()::equals) || dishList.stream().map(Dish::getPolishName).anyMatch(dish.getPolishName()::equals)) {",
                    "        throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"Dish with this name already exists.\");",
                    "    } else {",
                    "        dishRepository.save(dish);",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "deleteDishById",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    if (dishRepository.findById(id).isPresent()) {",
                    "        dishRepository.deleteById(id);",
                    "    } else {",
                    "        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Dish not found.\");",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "findDishes",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "List<Dish>",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "term",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    term = term.toLowerCase();",
                    "    List<Dish> dishes = getDishes();",
                    "    List<Dish> returnDishes = new ArrayList<>();",
                    "    Dish temp;",
                    "    for (int i = 0; i < dishes.size(); i++) {",
                    "        temp = dishes.get(i);",
                    "        if (temp.getEnglishName().toLowerCase().contains(term)) {",
                    "            returnDishes.add(temp);",
                    "        }",
                    "    }",
                    "    return returnDishes;",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.controller.DishController": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.controller.DishController",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.controller",
        "begin": 1,
        "end": 57,
        "short_name": "DishController",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.controller.DishController",
        "annotations": [
            "@AllArgsConstructor",
            "@RestController",
            "@CrossOrigin"
        ],
        "dependencies": [],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "DishService",
                "variable": "dishService",
                "lineBegin": 16,
                "lineEnd": 16
            }
        ],
        "methods": {
            "deleteDish": {
                "name": "deleteDish",
                "lineBegin": 47,
                "lineEnd": 53,
                "annotations": [
                    "@DeleteMapping(\"/dishes/{id}\")"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<Dish>",
                        "variable": "dish",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    }
                ],
                "body": "{\n    Optional<Dish> dish = dishService.getDishById(id);\n    if (!dish.isPresent())\n        throw new RuntimeException(\"Dish not found\");\n    dishService.deleteDishById(id);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "dishService",
                        "methodName": "getDishById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.DishService"
                    },
                    {
                        "scopeName": "dish",
                        "methodName": "isPresent",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    },
                    {
                        "scopeName": "dishService",
                        "methodName": "deleteDishById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.DishService"
                    }
                ]
            },
            "getDishById": {
                "name": "getDishById",
                "lineBegin": 25,
                "lineEnd": 29,
                "annotations": [
                    "@GetMapping(value = \"/dishes/{id}\")"
                ],
                "returnDataType": [
                    "Dish"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<Dish>",
                        "variable": "dish",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    }
                ],
                "body": "{\n    Optional<Dish> dish = dishService.getDishById(id);\n    return dish.orElse(null);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "dishService",
                        "methodName": "getDishById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.DishService"
                    },
                    {
                        "scopeName": "dish",
                        "methodName": "orElse",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish"
                    }
                ]
            },
            "updateDish": {
                "name": "updateDish",
                "lineBegin": 41,
                "lineEnd": 45,
                "annotations": [
                    "@PutMapping(\"/dishes/{id}\")"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "Dish",
                        "variable": "dish",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    dishService.updateDish(id, dish);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "dishService",
                        "methodName": "updateDish",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.DishService"
                    }
                ]
            },
            "getDishes": {
                "name": "getDishes",
                "lineBegin": 19,
                "lineEnd": 22,
                "annotations": [
                    "@GetMapping(\"/dishes\")"
                ],
                "returnDataType": [
                    "Collection<Dish>"
                ],
                "identifier": [
                    "Collection",
                    "Dish"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return dishService.getDishes();\n}",
                "methodInvocations": [
                    {
                        "scopeName": "dishService",
                        "methodName": "getDishes",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.DishService"
                    }
                ]
            },
            "addDish": {
                "name": "addDish",
                "lineBegin": 36,
                "lineEnd": 39,
                "annotations": [
                    "@PostMapping(\"/dishes\")"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Dish",
                        "variable": "dish",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    dishService.addDish(dish);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "dishService",
                        "methodName": "addDish",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.DishService"
                    }
                ]
            },
            "findDishes": {
                "name": "findDishes",
                "lineBegin": 31,
                "lineEnd": 34,
                "annotations": [
                    "@GetMapping(value = \"/dishes/name={term}\")"
                ],
                "returnDataType": [
                    "Collection<Dish>"
                ],
                "identifier": [
                    "Collection",
                    "Dish"
                ],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "term",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    return dishService.findDishes(term);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "dishService",
                        "methodName": "findDishes",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.DishService"
                    }
                ]
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.AllArgsConstructor",
            "org.springframework.web.bind.annotation",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Dish",
            "pl.edu.wat.wcy.pz.restaurantServer.service.DishService",
            "java.util.Collection",
            "java.util.Optional"
        ],
        "methodsInvocations": [
            {
                "scopeName": "dishService",
                "methodName": "getDishes",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.DishService"
            },
            {
                "scopeName": "dishService",
                "methodName": "getDishById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.DishService"
            },
            {
                "scopeName": "dishService",
                "methodName": "findDishes",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.DishService"
            },
            {
                "scopeName": "dishService",
                "methodName": "addDish",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.DishService"
            },
            {
                "scopeName": "dishService",
                "methodName": "updateDish",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.DishService"
            },
            {
                "scopeName": "dishService",
                "methodName": "getDishById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.DishService"
            },
            {
                "scopeName": "dishService",
                "methodName": "deleteDishById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.DishService"
            }
        ],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "deleteDish",
                "annotations": [
                    "@DeleteMapping(\"/dishes/{id}\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<Dish> dish = dishService.getDishById(id);",
                    "    if (!dish.isPresent())",
                    "        throw new RuntimeException(\"Dish not found\");",
                    "    dishService.deleteDishById(id);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getDishById",
                "annotations": [
                    "@GetMapping(value = \"/dishes/{id}\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "Dish",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<Dish> dish = dishService.getDishById(id);",
                    "    return dish.orElse(null);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "updateDish",
                "annotations": [
                    "@PutMapping(\"/dishes/{id}\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "Dish",
                        "variable": "dish",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    dishService.updateDish(id, dish);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getDishes",
                "annotations": [
                    "@GetMapping(\"/dishes\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "Collection<Dish>",
                "parameters": [],
                "body": [
                    "{",
                    "    return dishService.getDishes();",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "addDish",
                "annotations": [
                    "@PostMapping(\"/dishes\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Dish",
                        "variable": "dish",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    dishService.addDish(dish);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "findDishes",
                "annotations": [
                    "@GetMapping(value = \"/dishes/name={term}\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "Collection<Dish>",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "term",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    return dishService.findDishes(term);",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.repository",
        "begin": 1,
        "end": 14,
        "short_name": "ReservationRepository",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository",
        "annotations": [
            "@Transactional",
            "@Repository"
        ],
        "dependencies": [],
        "instance_variables": [],
        "methods": {
            "findByDateDays": {
                "name": "findByDateDays",
                "lineBegin": 13,
                "lineEnd": 13,
                "annotations": [],
                "returnDataType": [
                    "List<Reservation>"
                ],
                "identifier": [
                    "List",
                    "Reservation"
                ],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "dateDays",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "",
                "methodInvocations": []
            }
        },
        "implements": [],
        "extends": [
            "JpaRepository<Reservation, Long>"
        ],
        "imports": [
            "org.springframework.data.jpa.repository.JpaRepository",
            "org.springframework.stereotype.Repository",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation",
            "javax.transaction.Transactional",
            "java.util.List"
        ],
        "methodsInvocations": [],
        "isInterface": true,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "findByDateDays",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "List<Reservation>",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "dateDays",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    ""
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.entity",
        "begin": 1,
        "end": 111,
        "short_name": "Reservation",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation",
        "annotations": [
            "@AllArgsConstructor",
            "@NoArgsConstructor",
            "@Entity",
            "@Table(uniqueConstraints = { @UniqueConstraint(columnNames = { \"DATE\", \"RTABLE_ID\" }) })",
            "@Builder"
        ],
        "dependencies": [],
        "instance_variables": [
            {
                "annotations": [
                    "@Id",
                    "@GeneratedValue(strategy = GenerationType.IDENTITY)",
                    "@Column(name = \"RESERVATION_ID\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "Long",
                "variable": "reservationId",
                "lineBegin": 16,
                "lineEnd": 19
            },
            {
                "annotations": [
                    "@Column(name = \"DATE\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "Date",
                "variable": "date",
                "lineBegin": 20,
                "lineEnd": 21
            },
            {
                "annotations": [
                    "@Column(name = \"DATE_DAYS\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "dateDays",
                "lineBegin": 22,
                "lineEnd": 23
            },
            {
                "annotations": [
                    "@Column(name = \"DATE_TIME\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "dateTime",
                "lineBegin": 24,
                "lineEnd": 25
            },
            {
                "annotations": [
                    "@Column(name = \"RTABLE_ID\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "Long",
                "variable": "rTableId",
                "lineBegin": 26,
                "lineEnd": 27
            },
            {
                "annotations": [
                    "@Column(name = \"RTABLE_NUMBER\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "int",
                "variable": "rTableNumber",
                "lineBegin": 28,
                "lineEnd": 29
            },
            {
                "annotations": [
                    "@Column(name = \"ATTENDEES\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "int",
                "variable": "attendees",
                "lineBegin": 30,
                "lineEnd": 31
            },
            {
                "annotations": [
                    "@Column(name = \"USER_ID\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "Long",
                "variable": "userId",
                "lineBegin": 32,
                "lineEnd": 33
            },
            {
                "annotations": [
                    "@Column(name = \"STATUS\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "status",
                "lineBegin": 34,
                "lineEnd": 35
            }
        ],
        "methods": {
            "setDateDays": {
                "name": "setDateDays",
                "lineBegin": 58,
                "lineEnd": 60,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "dateDays",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.dateDays = dateDays;\n}",
                "methodInvocations": []
            },
            "getReservationId": {
                "name": "getReservationId",
                "lineBegin": 38,
                "lineEnd": 40,
                "annotations": [],
                "returnDataType": [
                    "Long"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return reservationId;\n}",
                "methodInvocations": []
            },
            "getDateTime": {
                "name": "getDateTime",
                "lineBegin": 62,
                "lineEnd": 64,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return dateTime;\n}",
                "methodInvocations": []
            },
            "getRTableId": {
                "name": "getRTableId",
                "lineBegin": 78,
                "lineEnd": 80,
                "annotations": [],
                "returnDataType": [
                    "Long"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return rTableId;\n}",
                "methodInvocations": []
            },
            "setrTableNumber": {
                "name": "setrTableNumber",
                "lineBegin": 90,
                "lineEnd": 92,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "int",
                        "variable": "rTableNumber",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.rTableNumber = rTableNumber;\n}",
                "methodInvocations": []
            },
            "setReservationId": {
                "name": "setReservationId",
                "lineBegin": 42,
                "lineEnd": 44,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "reservationId",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.reservationId = reservationId;\n}",
                "methodInvocations": []
            },
            "getStatus": {
                "name": "getStatus",
                "lineBegin": 70,
                "lineEnd": 72,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return status;\n}",
                "methodInvocations": []
            },
            "setStatus": {
                "name": "setStatus",
                "lineBegin": 74,
                "lineEnd": 76,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "status",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.status = status;\n}",
                "methodInvocations": []
            },
            "getAttendees": {
                "name": "getAttendees",
                "lineBegin": 94,
                "lineEnd": 96,
                "annotations": [],
                "returnDataType": [
                    "int"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return attendees;\n}",
                "methodInvocations": []
            },
            "setDateTime": {
                "name": "setDateTime",
                "lineBegin": 66,
                "lineEnd": 68,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "dateTime",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.dateTime = dateTime;\n}",
                "methodInvocations": []
            },
            "getDateDays": {
                "name": "getDateDays",
                "lineBegin": 54,
                "lineEnd": 56,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return dateDays;\n}",
                "methodInvocations": []
            },
            "setAttendees": {
                "name": "setAttendees",
                "lineBegin": 98,
                "lineEnd": 100,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "int",
                        "variable": "attendees",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.attendees = attendees;\n}",
                "methodInvocations": []
            },
            "setRTableId": {
                "name": "setRTableId",
                "lineBegin": 82,
                "lineEnd": 84,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "rTableId",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.rTableId = rTableId;\n}",
                "methodInvocations": []
            },
            "setDate": {
                "name": "setDate",
                "lineBegin": 50,
                "lineEnd": 52,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Date",
                        "variable": "date",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.date = date;\n}",
                "methodInvocations": []
            },
            "getDate": {
                "name": "getDate",
                "lineBegin": 46,
                "lineEnd": 48,
                "annotations": [],
                "returnDataType": [
                    "Date"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return date;\n}",
                "methodInvocations": []
            },
            "getrTableNumber": {
                "name": "getrTableNumber",
                "lineBegin": 86,
                "lineEnd": 88,
                "annotations": [],
                "returnDataType": [
                    "int"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return rTableNumber;\n}",
                "methodInvocations": []
            },
            "getUserId": {
                "name": "getUserId",
                "lineBegin": 102,
                "lineEnd": 104,
                "annotations": [],
                "returnDataType": [
                    "Long"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return userId;\n}",
                "methodInvocations": []
            },
            "setUserId": {
                "name": "setUserId",
                "lineBegin": 106,
                "lineEnd": 108,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "userId",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.userId = userId;\n}",
                "methodInvocations": []
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.AllArgsConstructor",
            "lombok.Builder",
            "lombok.NoArgsConstructor",
            "javax.persistence",
            "java.util.Date"
        ],
        "methodsInvocations": [],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "setDateDays",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "dateDays",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.dateDays = dateDays;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getReservationId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Long",
                "parameters": [],
                "body": [
                    "{",
                    "    return reservationId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getDateTime",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return dateTime;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getRTableId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Long",
                "parameters": [],
                "body": [
                    "{",
                    "    return rTableId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setrTableNumber",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "int",
                        "variable": "rTableNumber",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.rTableNumber = rTableNumber;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setReservationId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "reservationId",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.reservationId = reservationId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getStatus",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return status;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setStatus",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "status",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.status = status;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getAttendees",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "int",
                "parameters": [],
                "body": [
                    "{",
                    "    return attendees;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setDateTime",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "dateTime",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.dateTime = dateTime;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getDateDays",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return dateDays;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setAttendees",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "int",
                        "variable": "attendees",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.attendees = attendees;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setRTableId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "rTableId",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.rTableId = rTableId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setDate",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Date",
                        "variable": "date",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.date = date;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getDate",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Date",
                "parameters": [],
                "body": [
                    "{",
                    "    return date;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getrTableNumber",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "int",
                "parameters": [],
                "body": [
                    "{",
                    "    return rTableNumber;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getUserId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Long",
                "parameters": [],
                "body": [
                    "{",
                    "    return userId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setUserId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "userId",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.userId = userId;",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.service.ReservationService": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.service.ReservationService",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.service",
        "begin": 1,
        "end": 145,
        "short_name": "ReservationService",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.service.ReservationService",
        "annotations": [
            "@AllArgsConstructor",
            "@Service"
        ],
        "dependencies": [
            "pl.edu.wat.wcy.pz.restaurantServer.service.UserService",
            "pl.edu.wat.wcy.pz.restaurantServer.email.MailService",
            "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.User",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
        ],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "ReservationRepository",
                "variable": "reservationRepository",
                "lineBegin": 23,
                "lineEnd": 23
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "UserService",
                "variable": "userService",
                "lineBegin": 24,
                "lineEnd": 24
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "MailService",
                "variable": "mailService",
                "lineBegin": 25,
                "lineEnd": 25
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "RTableService",
                "variable": "rTableService",
                "lineBegin": 26,
                "lineEnd": 26
            }
        ],
        "methods": {
            "getReservationById": {
                "name": "getReservationById",
                "lineBegin": 48,
                "lineEnd": 56,
                "annotations": [],
                "returnDataType": [
                    "Optional<Reservation>"
                ],
                "identifier": [
                    "Optional",
                    "Reservation"
                ],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<Reservation>",
                        "variable": "reservation",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    }
                ],
                "body": "{\n    Optional<Reservation> reservation = reservationRepository.findById(id);\n    if (reservation.isPresent()) {\n        return reservation;\n    } else {\n        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Reservation not found.\");\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "reservationRepository",
                        "methodName": "findById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository"
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "isPresent",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    }
                ]
            },
            "addReservation": {
                "name": "addReservation",
                "lineBegin": 58,
                "lineEnd": 82,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Reservation",
                        "variable": "reservation",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Long",
                        "variable": "tabId",
                        "qualifedType": ""
                    },
                    {
                        "type": "List<Reservation>",
                        "variable": "reservationList",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "type": "User",
                        "variable": "user",
                        "qualifedType": ""
                    },
                    {
                        "type": "String",
                        "variable": "mail",
                        "qualifedType": ""
                    },
                    {
                        "type": "String",
                        "variable": "sb",
                        "qualifedType": ""
                    }
                ],
                "body": "{\n    Long tabId = getTableId(reservation);\n    if (tabId.equals(Long.valueOf(-1))) {\n        throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"Couldn't find suitable table for this date.\");\n    }\n    reservation.setRTableId(tabId);\n    List<Reservation> reservationList = reservationRepository.findAll();\n    if (reservationList.stream().map(Reservation::getRTableId).anyMatch(reservation.getRTableId()::equals) && reservationList.stream().map(Reservation::getDateTime).anyMatch(reservation.getDateTime()::equals) && reservationList.stream().map(Reservation::getDateDays).anyMatch(reservation.getDateDays()::equals)) {\n        throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"Reservation for this table and date already exists.\");\n    } else {\n        if (reservation.getUserId() != null) {\n            User user = userService.getUserById(reservation.getUserId()).get();\n            String mail = user.getMail();\n            String sb = \"Hello \" + user.getFirstName() + \" you've made reservation for \" + reservation.getAttendees() + \" people on \" + reservation.getDateDays() + \" \" + reservation.getDateTime() + \". Table \" + reservation.getRTableId() + \" is waiting for you\";\n            mailService.sendEmail(mail, \"Reservation has been made.\", sb);\n        }\n        reservation.setrTableNumber(rTableService.getRTableById(tabId).get().getNumber());\n        reservation.setStatus(\"PENDING\");\n        reservationRepository.save(reservation);\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "tabId",
                        "methodName": "equals",
                        "targetClassName": ""
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "setRTableId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservationRepository",
                        "methodName": "findAll",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository"
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "getRTableId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservationList",
                        "methodName": "stream",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservationList.stream()",
                        "methodName": "map",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "getDateTime",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservationList",
                        "methodName": "stream",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservationList.stream()",
                        "methodName": "map",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "getDateDays",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservationList",
                        "methodName": "stream",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservationList.stream()",
                        "methodName": "map",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "getUserId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "getUserId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "userService",
                        "methodName": "getUserById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.UserService"
                    },
                    {
                        "scopeName": "user",
                        "methodName": "getMail",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "user",
                        "methodName": "getFirstName",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "getAttendees",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "getDateDays",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "getDateTime",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "getRTableId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "mailService",
                        "methodName": "sendEmail",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.email.MailService"
                    },
                    {
                        "scopeName": "rTableService",
                        "methodName": "getRTableById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "setrTableNumber",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "setStatus",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservationRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository"
                    }
                ]
            },
            "deleteReservationById": {
                "name": "deleteReservationById",
                "lineBegin": 126,
                "lineEnd": 142,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<Reservation>",
                        "variable": "res",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "type": "Reservation",
                        "variable": "reservation",
                        "qualifedType": ""
                    },
                    {
                        "type": "User",
                        "variable": "user",
                        "qualifedType": ""
                    },
                    {
                        "type": "String",
                        "variable": "mail",
                        "qualifedType": ""
                    },
                    {
                        "type": "String",
                        "variable": "sb",
                        "qualifedType": ""
                    }
                ],
                "body": "{\n    Optional<Reservation> res = reservationRepository.findById(id);\n    if (res.isPresent()) {\n        Reservation reservation = res.get();\n        if (reservation.getUserId() != null) {\n            User user = userService.getUserById(reservation.getUserId()).get();\n            String mail = user.getMail();\n            String sb = \"Hello \" + user.getFirstName() + \" your reservation \" + \" on \" + reservation.getDateDays() + \" \" + reservation.getDateTime() + \" has been cancelled.\" + \" You're welcome another time\";\n            mailService.sendEmail(mail, \"Reservation has been cancelled.\", sb);\n        }\n        reservationRepository.deleteById(id);\n    } else {\n        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Reservation not found.\");\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "reservationRepository",
                        "methodName": "findById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository"
                    },
                    {
                        "scopeName": "res",
                        "methodName": "isPresent",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "res",
                        "methodName": "get",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "getUserId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "getUserId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "userService",
                        "methodName": "getUserById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.UserService"
                    },
                    {
                        "scopeName": "user",
                        "methodName": "getMail",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "user",
                        "methodName": "getFirstName",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "getDateDays",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "getDateTime",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "mailService",
                        "methodName": "sendEmail",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.email.MailService"
                    },
                    {
                        "scopeName": "reservationRepository",
                        "methodName": "deleteById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository"
                    }
                ]
            },
            "updateReservation": {
                "name": "updateReservation",
                "lineBegin": 113,
                "lineEnd": 124,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "Reservation",
                        "variable": "reservation",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<Reservation>",
                        "variable": "oldReservation",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    }
                ],
                "body": "{\n    Optional<Reservation> oldReservation = reservationRepository.findById(id);\n    if (!oldReservation.isPresent())\n        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Reservation not found.\");\n    else {\n        reservation.setReservationId(id);\n        reservationRepository.save(reservation);\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "reservationRepository",
                        "methodName": "findById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository"
                    },
                    {
                        "scopeName": "oldReservation",
                        "methodName": "isPresent",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "setReservationId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservationRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository"
                    }
                ]
            },
            "getReservations": {
                "name": "getReservations",
                "lineBegin": 28,
                "lineEnd": 30,
                "annotations": [],
                "returnDataType": [
                    "List<Reservation>"
                ],
                "identifier": [
                    "List",
                    "Reservation"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return reservationRepository.findAll();\n}",
                "methodInvocations": [
                    {
                        "scopeName": "reservationRepository",
                        "methodName": "findAll",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository"
                    }
                ]
            },
            "getCurrentReservations": {
                "name": "getCurrentReservations",
                "lineBegin": 32,
                "lineEnd": 46,
                "annotations": [],
                "returnDataType": [
                    "List<Reservation>"
                ],
                "identifier": [
                    "List",
                    "Reservation"
                ],
                "parametersDataType": [],
                "variables": [
                    {
                        "type": "SimpleDateFormat",
                        "variable": "dateFormatter",
                        "qualifedType": ""
                    },
                    {
                        "type": "Date",
                        "variable": "date",
                        "qualifedType": ""
                    },
                    {
                        "type": "String",
                        "variable": "dateDays",
                        "qualifedType": ""
                    },
                    {
                        "type": "List<Reservation>",
                        "variable": "reservationList",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "type": "List<Reservation>",
                        "variable": "returnList",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "type": "Reservation",
                        "variable": "temp",
                        "qualifedType": ""
                    },
                    {
                        "type": "Reservation",
                        "variable": "aReservationList",
                        "qualifedType": ""
                    }
                ],
                "body": "{\n    SimpleDateFormat dateFormatter = new SimpleDateFormat(\"dd/MM/yyyy\");\n    Date date = new Date();\n    String dateDays = dateFormatter.format(date);\n    List<Reservation> reservationList = reservationRepository.findByDateDays(dateDays);\n    List<Reservation> returnList = new ArrayList<>();\n    Reservation temp;\n    for (Reservation aReservationList : reservationList) {\n        temp = aReservationList;\n        if (temp.getStatus().equals(\"PENDING\")) {\n            returnList.add(temp);\n        }\n    }\n    return returnList;\n}",
                "methodInvocations": [
                    {
                        "scopeName": "dateFormatter",
                        "methodName": "format",
                        "targetClassName": ""
                    },
                    {
                        "scopeName": "reservationRepository",
                        "methodName": "findByDateDays",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository"
                    },
                    {
                        "scopeName": "temp",
                        "methodName": "getStatus",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "temp.getStatus()",
                        "methodName": "equals",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "returnList",
                        "methodName": "add",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    }
                ]
            },
            "getTableId": {
                "name": "getTableId",
                "lineBegin": 84,
                "lineEnd": 111,
                "annotations": [],
                "returnDataType": [
                    "Long"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Reservation",
                        "variable": "reservation",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "List<RTable>",
                        "variable": "tableList",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    },
                    {
                        "type": "List<RTable>",
                        "variable": "reservable",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    },
                    {
                        "type": "String",
                        "variable": "dateDays",
                        "qualifedType": ""
                    },
                    {
                        "type": "String",
                        "variable": "dateTime",
                        "qualifedType": ""
                    },
                    {
                        "type": "RTable",
                        "variable": "tempTable",
                        "qualifedType": ""
                    },
                    {
                        "type": "Reservation",
                        "variable": "tempReservation",
                        "qualifedType": ""
                    },
                    {
                        "type": "boolean",
                        "variable": "free",
                        "qualifedType": ""
                    },
                    {
                        "type": "List<Reservation>",
                        "variable": "tempReservations",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "type": "int",
                        "variable": "j",
                        "qualifedType": ""
                    },
                    {
                        "type": "int",
                        "variable": "i",
                        "qualifedType": ""
                    }
                ],
                "body": "{\n    List<RTable> tableList = rTableService.getRTablesBySize(reservation.getAttendees());\n    List<RTable> reservable = new ArrayList<>();\n    String dateDays = reservation.getDateDays();\n    String dateTime = reservation.getDateTime();\n    RTable tempTable;\n    Reservation tempReservation;\n    boolean free;\n    for (int i = 0; i < tableList.size(); i++) {\n        free = true;\n        tempTable = tableList.get(i);\n        List<Reservation> tempReservations = tempTable.getReservations();\n        for (int j = 0; j < tempReservations.size(); j++) {\n            tempReservation = tempReservations.get(j);\n            if (tempReservation.getDateDays().equals(dateDays) && tempReservation.getDateTime().equals(dateTime)) {\n                free = false;\n            }\n        }\n        if (free) {\n            reservable.add(tempTable);\n        }\n    }\n    if (reservable.size() == 0) {\n        return Long.valueOf(-1);\n    } else {\n        return reservable.get(0).getRTableId();\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "reservation",
                        "methodName": "getAttendees",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "rTableService",
                        "methodName": "getRTablesBySize",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "getDateDays",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "getDateTime",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "tableList",
                        "methodName": "get",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    },
                    {
                        "scopeName": "tempTable",
                        "methodName": "getReservations",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    },
                    {
                        "scopeName": "tempReservations",
                        "methodName": "get",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "tempReservation",
                        "methodName": "getDateDays",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "tempReservation.getDateDays()",
                        "methodName": "equals",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "tempReservation",
                        "methodName": "getDateTime",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "tempReservation.getDateTime()",
                        "methodName": "equals",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "tempReservations",
                        "methodName": "size",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservable",
                        "methodName": "add",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    },
                    {
                        "scopeName": "tableList",
                        "methodName": "size",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    },
                    {
                        "scopeName": "reservable",
                        "methodName": "size",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    },
                    {
                        "scopeName": "reservable",
                        "methodName": "get",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    },
                    {
                        "scopeName": "reservable.get(0)",
                        "methodName": "getRTableId",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
                    }
                ]
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.AllArgsConstructor",
            "org.springframework.http.HttpStatus",
            "org.springframework.stereotype.Service",
            "org.springframework.web.server.ResponseStatusException",
            "pl.edu.wat.wcy.pz.restaurantServer.email.MailService",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.User",
            "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository",
            "java.text.SimpleDateFormat",
            "java.util.ArrayList",
            "java.util.Date",
            "java.util.List",
            "java.util.Optional"
        ],
        "methodsInvocations": [
            {
                "scopeName": "reservationRepository",
                "methodName": "findAll",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository"
            },
            {
                "scopeName": "reservationRepository",
                "methodName": "findByDateDays",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository"
            },
            {
                "scopeName": "temp",
                "methodName": "getStatus",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "temp.getStatus()",
                "methodName": "equals",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "reservationRepository",
                "methodName": "findById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository"
            },
            {
                "scopeName": "reservation",
                "methodName": "setRTableId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "reservationRepository",
                "methodName": "findAll",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository"
            },
            {
                "scopeName": "reservation",
                "methodName": "getRTableId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "reservation",
                "methodName": "getDateTime",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "reservation",
                "methodName": "getDateDays",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "reservation",
                "methodName": "getUserId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "reservation",
                "methodName": "getUserId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "userService",
                "methodName": "getUserById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.UserService"
            },
            {
                "scopeName": "user",
                "methodName": "getMail",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "user",
                "methodName": "getFirstName",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "reservation",
                "methodName": "getAttendees",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "reservation",
                "methodName": "getDateDays",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "reservation",
                "methodName": "getDateTime",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "reservation",
                "methodName": "getRTableId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "mailService",
                "methodName": "sendEmail",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.email.MailService"
            },
            {
                "scopeName": "rTableService",
                "methodName": "getRTableById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
            },
            {
                "scopeName": "reservation",
                "methodName": "setrTableNumber",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "reservation",
                "methodName": "setStatus",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "reservationRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository"
            },
            {
                "scopeName": "reservation",
                "methodName": "getAttendees",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "rTableService",
                "methodName": "getRTablesBySize",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.RTableService"
            },
            {
                "scopeName": "reservation",
                "methodName": "getDateDays",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "reservation",
                "methodName": "getDateTime",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "tempTable",
                "methodName": "getReservations",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.RTable"
            },
            {
                "scopeName": "tempReservation",
                "methodName": "getDateDays",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "tempReservation.getDateDays()",
                "methodName": "equals",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "tempReservation",
                "methodName": "getDateTime",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "tempReservation.getDateTime()",
                "methodName": "equals",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "reservationRepository",
                "methodName": "findById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository"
            },
            {
                "scopeName": "reservation",
                "methodName": "setReservationId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "reservationRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository"
            },
            {
                "scopeName": "reservationRepository",
                "methodName": "findById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository"
            },
            {
                "scopeName": "reservation",
                "methodName": "getUserId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "reservation",
                "methodName": "getUserId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "userService",
                "methodName": "getUserById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.UserService"
            },
            {
                "scopeName": "user",
                "methodName": "getMail",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "user",
                "methodName": "getFirstName",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "reservation",
                "methodName": "getDateDays",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "reservation",
                "methodName": "getDateTime",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "mailService",
                "methodName": "sendEmail",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.email.MailService"
            },
            {
                "scopeName": "reservationRepository",
                "methodName": "deleteById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.ReservationRepository"
            }
        ],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "getReservationById",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Optional<Reservation>",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<Reservation> reservation = reservationRepository.findById(id);",
                    "    if (reservation.isPresent()) {",
                    "        return reservation;",
                    "    } else {",
                    "        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Reservation not found.\");",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "addReservation",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Reservation",
                        "variable": "reservation",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Long tabId = getTableId(reservation);",
                    "    if (tabId.equals(Long.valueOf(-1))) {",
                    "        throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"Couldn't find suitable table for this date.\");",
                    "    }",
                    "    reservation.setRTableId(tabId);",
                    "    List<Reservation> reservationList = reservationRepository.findAll();",
                    "    if (reservationList.stream().map(Reservation::getRTableId).anyMatch(reservation.getRTableId()::equals) && reservationList.stream().map(Reservation::getDateTime).anyMatch(reservation.getDateTime()::equals) && reservationList.stream().map(Reservation::getDateDays).anyMatch(reservation.getDateDays()::equals)) {",
                    "        throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"Reservation for this table and date already exists.\");",
                    "    } else {",
                    "        if (reservation.getUserId() != null) {",
                    "            User user = userService.getUserById(reservation.getUserId()).get();",
                    "            String mail = user.getMail();",
                    "            String sb = \"Hello \" + user.getFirstName() + \" you've made reservation for \" + reservation.getAttendees() + \" people on \" + reservation.getDateDays() + \" \" + reservation.getDateTime() + \". Table \" + reservation.getRTableId() + \" is waiting for you\";",
                    "            mailService.sendEmail(mail, \"Reservation has been made.\", sb);",
                    "        }",
                    "        reservation.setrTableNumber(rTableService.getRTableById(tabId).get().getNumber());",
                    "        reservation.setStatus(\"PENDING\");",
                    "        reservationRepository.save(reservation);",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "deleteReservationById",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<Reservation> res = reservationRepository.findById(id);",
                    "    if (res.isPresent()) {",
                    "        Reservation reservation = res.get();",
                    "        if (reservation.getUserId() != null) {",
                    "            User user = userService.getUserById(reservation.getUserId()).get();",
                    "            String mail = user.getMail();",
                    "            String sb = \"Hello \" + user.getFirstName() + \" your reservation \" + \" on \" + reservation.getDateDays() + \" \" + reservation.getDateTime() + \" has been cancelled.\" + \" You're welcome another time\";",
                    "            mailService.sendEmail(mail, \"Reservation has been cancelled.\", sb);",
                    "        }",
                    "        reservationRepository.deleteById(id);",
                    "    } else {",
                    "        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Reservation not found.\");",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "updateReservation",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "Reservation",
                        "variable": "reservation",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<Reservation> oldReservation = reservationRepository.findById(id);",
                    "    if (!oldReservation.isPresent())",
                    "        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Reservation not found.\");",
                    "    else {",
                    "        reservation.setReservationId(id);",
                    "        reservationRepository.save(reservation);",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getReservations",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "List<Reservation>",
                "parameters": [],
                "body": [
                    "{",
                    "    return reservationRepository.findAll();",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getCurrentReservations",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "List<Reservation>",
                "parameters": [],
                "body": [
                    "{",
                    "    SimpleDateFormat dateFormatter = new SimpleDateFormat(\"dd/MM/yyyy\");",
                    "    Date date = new Date();",
                    "    String dateDays = dateFormatter.format(date);",
                    "    List<Reservation> reservationList = reservationRepository.findByDateDays(dateDays);",
                    "    List<Reservation> returnList = new ArrayList<>();",
                    "    Reservation temp;",
                    "    for (Reservation aReservationList : reservationList) {",
                    "        temp = aReservationList;",
                    "        if (temp.getStatus().equals(\"PENDING\")) {",
                    "            returnList.add(temp);",
                    "        }",
                    "    }",
                    "    return returnList;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getTableId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Long",
                "parameters": [
                    {
                        "type": "Reservation",
                        "variable": "reservation",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    List<RTable> tableList = rTableService.getRTablesBySize(reservation.getAttendees());",
                    "    List<RTable> reservable = new ArrayList<>();",
                    "    String dateDays = reservation.getDateDays();",
                    "    String dateTime = reservation.getDateTime();",
                    "    RTable tempTable;",
                    "    Reservation tempReservation;",
                    "    boolean free;",
                    "    for (int i = 0; i < tableList.size(); i++) {",
                    "        free = true;",
                    "        tempTable = tableList.get(i);",
                    "        List<Reservation> tempReservations = tempTable.getReservations();",
                    "        for (int j = 0; j < tempReservations.size(); j++) {",
                    "            tempReservation = tempReservations.get(j);",
                    "            if (tempReservation.getDateDays().equals(dateDays) && tempReservation.getDateTime().equals(dateTime)) {",
                    "                free = false;",
                    "            }",
                    "        }",
                    "        if (free) {",
                    "            reservable.add(tempTable);",
                    "        }",
                    "    }",
                    "    if (reservable.size() == 0) {",
                    "        return Long.valueOf(-1);",
                    "    } else {",
                    "        return reservable.get(0).getRTableId();",
                    "    }",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.controller.ReservationController": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.controller.ReservationController",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.controller",
        "begin": 1,
        "end": 70,
        "short_name": "ReservationController",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.controller.ReservationController",
        "annotations": [
            "@AllArgsConstructor",
            "@RestController",
            "@CrossOrigin"
        ],
        "dependencies": [],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "ReservationService",
                "variable": "reservationService",
                "lineBegin": 20,
                "lineEnd": 20
            }
        ],
        "methods": {
            "getReservationById": {
                "name": "getReservationById",
                "lineBegin": 33,
                "lineEnd": 37,
                "annotations": [
                    "@GetMapping(value = \"/reservations/{id}\")"
                ],
                "returnDataType": [
                    "Reservation"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Optional<Reservation>",
                        "variable": "reservation",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    }
                ],
                "body": "{\n    Optional<Reservation> reservation = reservationService.getReservationById(id);\n    return reservation.orElse(null);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "reservationService",
                        "methodName": "getReservationById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.ReservationService"
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "orElse",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    }
                ]
            },
            "addReservation": {
                "name": "addReservation",
                "lineBegin": 39,
                "lineEnd": 55,
                "annotations": [
                    "@PostMapping(\"/reservations\")"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Reservation",
                        "variable": "reservation",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Date",
                        "variable": "date",
                        "qualifedType": ""
                    },
                    {
                        "type": "SimpleDateFormat",
                        "variable": "dateFormatter",
                        "qualifedType": ""
                    },
                    {
                        "type": "SimpleDateFormat",
                        "variable": "timeFormatter",
                        "qualifedType": ""
                    },
                    {
                        "type": "String",
                        "variable": "dateDays",
                        "qualifedType": ""
                    },
                    {
                        "type": "String",
                        "variable": "dateTime",
                        "qualifedType": ""
                    }
                ],
                "body": "{\n    Date date = reservation.getDate();\n    if (date != null) {\n        if (date.before(new Date())) {\n            throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"Can't make reservation for past dates.\");\n        }\n        SimpleDateFormat dateFormatter = new SimpleDateFormat(\"dd/MM/yyyy\");\n        SimpleDateFormat timeFormatter = new SimpleDateFormat(\"HH:mm\");\n        String dateDays = dateFormatter.format(date);\n        String dateTime = timeFormatter.format(date);\n        reservation.setDateDays(dateDays);\n        reservation.setDateTime(dateTime);\n    }\n    reservationService.addReservation(reservation);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "reservation",
                        "methodName": "getDate",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "date",
                        "methodName": "before",
                        "targetClassName": ""
                    },
                    {
                        "scopeName": "dateFormatter",
                        "methodName": "format",
                        "targetClassName": ""
                    },
                    {
                        "scopeName": "timeFormatter",
                        "methodName": "format",
                        "targetClassName": ""
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "setDateDays",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservation",
                        "methodName": "setDateTime",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
                    },
                    {
                        "scopeName": "reservationService",
                        "methodName": "addReservation",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.ReservationService"
                    }
                ]
            },
            "updateReservation": {
                "name": "updateReservation",
                "lineBegin": 57,
                "lineEnd": 61,
                "annotations": [
                    "@PutMapping(\"/reservations/{id}\")"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "Reservation",
                        "variable": "reservation",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    reservationService.updateReservation(id, reservation);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "reservationService",
                        "methodName": "updateReservation",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.ReservationService"
                    }
                ]
            },
            "getReservations": {
                "name": "getReservations",
                "lineBegin": 23,
                "lineEnd": 26,
                "annotations": [
                    "@GetMapping(\"/reservations\")"
                ],
                "returnDataType": [
                    "Collection<Reservation>"
                ],
                "identifier": [
                    "Collection",
                    "Reservation"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return reservationService.getReservations();\n}",
                "methodInvocations": [
                    {
                        "scopeName": "reservationService",
                        "methodName": "getReservations",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.ReservationService"
                    }
                ]
            },
            "deleteReservation": {
                "name": "deleteReservation",
                "lineBegin": 63,
                "lineEnd": 66,
                "annotations": [
                    "@DeleteMapping(\"/reservations/{id}\")"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    reservationService.deleteReservationById(id);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "reservationService",
                        "methodName": "deleteReservationById",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.ReservationService"
                    }
                ]
            },
            "getCurrentReservations": {
                "name": "getCurrentReservations",
                "lineBegin": 28,
                "lineEnd": 31,
                "annotations": [
                    "@GetMapping(\"/reservations/current\")"
                ],
                "returnDataType": [
                    "Collection<Reservation>"
                ],
                "identifier": [
                    "Collection",
                    "Reservation"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return reservationService.getCurrentReservations();\n}",
                "methodInvocations": [
                    {
                        "scopeName": "reservationService",
                        "methodName": "getCurrentReservations",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.ReservationService"
                    }
                ]
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.AllArgsConstructor",
            "org.springframework.http.HttpStatus",
            "org.springframework.web.bind.annotation",
            "org.springframework.web.server.ResponseStatusException",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation",
            "pl.edu.wat.wcy.pz.restaurantServer.service.ReservationService",
            "java.text.SimpleDateFormat",
            "java.util.Collection",
            "java.util.Date",
            "java.util.Optional"
        ],
        "methodsInvocations": [
            {
                "scopeName": "reservationService",
                "methodName": "getReservations",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.ReservationService"
            },
            {
                "scopeName": "reservationService",
                "methodName": "getCurrentReservations",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.ReservationService"
            },
            {
                "scopeName": "reservationService",
                "methodName": "getReservationById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.ReservationService"
            },
            {
                "scopeName": "reservation",
                "methodName": "getDate",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "reservation",
                "methodName": "setDateDays",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "reservation",
                "methodName": "setDateTime",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
            },
            {
                "scopeName": "reservationService",
                "methodName": "addReservation",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.ReservationService"
            },
            {
                "scopeName": "reservationService",
                "methodName": "updateReservation",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.ReservationService"
            },
            {
                "scopeName": "reservationService",
                "methodName": "deleteReservationById",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.service.ReservationService"
            }
        ],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "getReservationById",
                "annotations": [
                    "@GetMapping(value = \"/reservations/{id}\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "Reservation",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Optional<Reservation> reservation = reservationService.getReservationById(id);",
                    "    return reservation.orElse(null);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "addReservation",
                "annotations": [
                    "@PostMapping(\"/reservations\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Reservation",
                        "variable": "reservation",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Date date = reservation.getDate();",
                    "    if (date != null) {",
                    "        if (date.before(new Date())) {",
                    "            throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"Can't make reservation for past dates.\");",
                    "        }",
                    "        SimpleDateFormat dateFormatter = new SimpleDateFormat(\"dd/MM/yyyy\");",
                    "        SimpleDateFormat timeFormatter = new SimpleDateFormat(\"HH:mm\");",
                    "        String dateDays = dateFormatter.format(date);",
                    "        String dateTime = timeFormatter.format(date);",
                    "        reservation.setDateDays(dateDays);",
                    "        reservation.setDateTime(dateTime);",
                    "    }",
                    "    reservationService.addReservation(reservation);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "updateReservation",
                "annotations": [
                    "@PutMapping(\"/reservations/{id}\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    },
                    {
                        "type": "Reservation",
                        "variable": "reservation",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    reservationService.updateReservation(id, reservation);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getReservations",
                "annotations": [
                    "@GetMapping(\"/reservations\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "Collection<Reservation>",
                "parameters": [],
                "body": [
                    "{",
                    "    return reservationService.getReservations();",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "deleteReservation",
                "annotations": [
                    "@DeleteMapping(\"/reservations/{id}\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "id",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    reservationService.deleteReservationById(id);",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getCurrentReservations",
                "annotations": [
                    "@GetMapping(\"/reservations/current\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "Collection<Reservation>",
                "parameters": [],
                "body": [
                    "{",
                    "    return reservationService.getCurrentReservations();",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.form.response.JwtResponse": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.form.response.JwtResponse",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.form.response",
        "begin": 1,
        "end": 101,
        "short_name": "JwtResponse",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.form.response.JwtResponse",
        "annotations": [
            "@Getter",
            "@Setter"
        ],
        "dependencies": [
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation"
        ],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "jwtToken",
                "lineBegin": 17,
                "lineEnd": 17
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "tokenType",
                "lineBegin": 18,
                "lineEnd": 18
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "Long",
                "variable": "userId",
                "lineBegin": 19,
                "lineEnd": 19
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "mail",
                "lineBegin": 20,
                "lineEnd": 20
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "firstName",
                "lineBegin": 21,
                "lineEnd": 21
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "lastName",
                "lineBegin": 22,
                "lineEnd": 22
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [
                    "Set",
                    "Role"
                ],
                "type": "Set<Role>",
                "variable": "roles",
                "lineBegin": 23,
                "lineEnd": 23
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [
                    "List",
                    "Reservation"
                ],
                "type": "List<Reservation>",
                "variable": "reservations",
                "lineBegin": 24,
                "lineEnd": 24
            }
        ],
        "methods": {
            "getTokenType": {
                "name": "getTokenType",
                "lineBegin": 46,
                "lineEnd": 48,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return tokenType;\n}",
                "methodInvocations": []
            },
            "setTokenType": {
                "name": "setTokenType",
                "lineBegin": 50,
                "lineEnd": 52,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "tokenType",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.tokenType = tokenType;\n}",
                "methodInvocations": []
            },
            "setReservations": {
                "name": "setReservations",
                "lineBegin": 98,
                "lineEnd": 100,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "List<Reservation>",
                        "variable": "reservations",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.reservations = reservations;\n}",
                "methodInvocations": []
            },
            "getJwtToken": {
                "name": "getJwtToken",
                "lineBegin": 38,
                "lineEnd": 40,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return jwtToken;\n}",
                "methodInvocations": []
            },
            "getLastName": {
                "name": "getLastName",
                "lineBegin": 78,
                "lineEnd": 80,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return lastName;\n}",
                "methodInvocations": []
            },
            "setJwtToken": {
                "name": "setJwtToken",
                "lineBegin": 42,
                "lineEnd": 44,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "jwtToken",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.jwtToken = jwtToken;\n}",
                "methodInvocations": []
            },
            "getMail": {
                "name": "getMail",
                "lineBegin": 62,
                "lineEnd": 64,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return mail;\n}",
                "methodInvocations": []
            },
            "setLastName": {
                "name": "setLastName",
                "lineBegin": 82,
                "lineEnd": 84,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "lastName",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.lastName = lastName;\n}",
                "methodInvocations": []
            },
            "setMail": {
                "name": "setMail",
                "lineBegin": 66,
                "lineEnd": 68,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "mail",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.mail = mail;\n}",
                "methodInvocations": []
            },
            "setFirstName": {
                "name": "setFirstName",
                "lineBegin": 74,
                "lineEnd": 76,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "firstName",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.firstName = firstName;\n}",
                "methodInvocations": []
            },
            "getReservations": {
                "name": "getReservations",
                "lineBegin": 94,
                "lineEnd": 96,
                "annotations": [],
                "returnDataType": [
                    "List<Reservation>"
                ],
                "identifier": [
                    "List",
                    "Reservation"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return reservations;\n}",
                "methodInvocations": []
            },
            "getFirstName": {
                "name": "getFirstName",
                "lineBegin": 70,
                "lineEnd": 72,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return firstName;\n}",
                "methodInvocations": []
            },
            "setRoles": {
                "name": "setRoles",
                "lineBegin": 90,
                "lineEnd": 92,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Set<Role>",
                        "variable": "roles",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.roles = roles;\n}",
                "methodInvocations": []
            },
            "getUserId": {
                "name": "getUserId",
                "lineBegin": 54,
                "lineEnd": 56,
                "annotations": [],
                "returnDataType": [
                    "Long"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return userId;\n}",
                "methodInvocations": []
            },
            "setUserId": {
                "name": "setUserId",
                "lineBegin": 58,
                "lineEnd": 60,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "userId",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.userId = userId;\n}",
                "methodInvocations": []
            },
            "getRoles": {
                "name": "getRoles",
                "lineBegin": 86,
                "lineEnd": 88,
                "annotations": [],
                "returnDataType": [
                    "Set<Role>"
                ],
                "identifier": [
                    "Set",
                    "Role"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return roles;\n}",
                "methodInvocations": []
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.Getter",
            "lombok.Setter",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Reservation",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Role",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.User",
            "java.util.List",
            "java.util.Set"
        ],
        "methodsInvocations": [
            {
                "scopeName": "user",
                "methodName": "getUserId",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "user",
                "methodName": "getMail",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "user",
                "methodName": "getFirstName",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "user",
                "methodName": "getLastName",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "user",
                "methodName": "getRoles",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "user",
                "methodName": "getReservations",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            }
        ],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "getTokenType",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return tokenType;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setTokenType",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "tokenType",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.tokenType = tokenType;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setReservations",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "List<Reservation>",
                        "variable": "reservations",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.reservations = reservations;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getJwtToken",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return jwtToken;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getLastName",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return lastName;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setJwtToken",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "jwtToken",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.jwtToken = jwtToken;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getMail",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return mail;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setLastName",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "lastName",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.lastName = lastName;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setMail",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "mail",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.mail = mail;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setFirstName",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "firstName",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.firstName = firstName;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getReservations",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "List<Reservation>",
                "parameters": [],
                "body": [
                    "{",
                    "    return reservations;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getFirstName",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return firstName;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setRoles",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Set<Role>",
                        "variable": "roles",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.roles = roles;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getUserId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Long",
                "parameters": [],
                "body": [
                    "{",
                    "    return userId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setUserId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "userId",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.userId = userId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getRoles",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Set<Role>",
                "parameters": [],
                "body": [
                    "{",
                    "    return roles;",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.email.MailService": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.email.MailService",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.email",
        "begin": 1,
        "end": 37,
        "short_name": "MailService",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.email.MailService",
        "annotations": [
            "@Service"
        ],
        "dependencies": [],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "JavaMailSender",
                "variable": "javaMailSender",
                "lineBegin": 14,
                "lineEnd": 14
            }
        ],
        "methods": {
            "sendEmail": {
                "name": "sendEmail",
                "lineBegin": 21,
                "lineEnd": 35,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "destination",
                        "qualifedType": ""
                    },
                    {
                        "type": "String",
                        "variable": "subject",
                        "qualifedType": ""
                    },
                    {
                        "type": "String",
                        "variable": "content",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "MimeMessage",
                        "variable": "mail",
                        "qualifedType": ""
                    },
                    {
                        "type": "MimeMessageHelper",
                        "variable": "helper",
                        "qualifedType": ""
                    }
                ],
                "body": "{\n    MimeMessage mail = javaMailSender.createMimeMessage();\n    try {\n        MimeMessageHelper helper = new MimeMessageHelper(mail, true);\n        helper.setTo(destination);\n        helper.setReplyTo(\"restaurantprojectPZ@gmail.com\");\n        helper.setFrom(\"restaurantprojectPZ@gmail.com\");\n        helper.setSubject(subject);\n        helper.setText(content);\n    } catch (MessagingException e) {\n        e.printStackTrace();\n    }\n    javaMailSender.send(mail);\n}",
                "methodInvocations": [
                    {
                        "scopeName": "helper",
                        "methodName": "setTo",
                        "targetClassName": ""
                    },
                    {
                        "scopeName": "helper",
                        "methodName": "setReplyTo",
                        "targetClassName": ""
                    },
                    {
                        "scopeName": "helper",
                        "methodName": "setFrom",
                        "targetClassName": ""
                    },
                    {
                        "scopeName": "helper",
                        "methodName": "setSubject",
                        "targetClassName": ""
                    },
                    {
                        "scopeName": "helper",
                        "methodName": "setText",
                        "targetClassName": ""
                    }
                ]
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "org.springframework.beans.factory.annotation.Autowired",
            "org.springframework.mail.javamail.JavaMailSender",
            "org.springframework.mail.javamail.MimeMessageHelper",
            "org.springframework.stereotype.Service",
            "javax.mail.MessagingException",
            "javax.mail.internet.MimeMessage"
        ],
        "methodsInvocations": [],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "sendEmail",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "destination",
                        "qualifedType": ""
                    },
                    {
                        "type": "String",
                        "variable": "subject",
                        "qualifedType": ""
                    },
                    {
                        "type": "String",
                        "variable": "content",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    MimeMessage mail = javaMailSender.createMimeMessage();",
                    "    try {",
                    "        MimeMessageHelper helper = new MimeMessageHelper(mail, true);",
                    "        helper.setTo(destination);",
                    "        helper.setReplyTo(\"restaurantprojectPZ@gmail.com\");",
                    "        helper.setFrom(\"restaurantprojectPZ@gmail.com\");",
                    "        helper.setSubject(subject);",
                    "        helper.setText(content);",
                    "    } catch (MessagingException e) {",
                    "        e.printStackTrace();",
                    "    }",
                    "    javaMailSender.send(mail);",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.controller.AuthController": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.controller.AuthController",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.controller",
        "begin": 1,
        "end": 95,
        "short_name": "AuthController",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.controller.AuthController",
        "annotations": [
            "@AllArgsConstructor",
            "@CrossOrigin",
            "@RestController",
            "@RequestMapping(\"/auth\")"
        ],
        "dependencies": [
            "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository",
            "pl.edu.wat.wcy.pz.restaurantServer.security.jwt.JwtProvider",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
        ],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "Logger",
                "variable": "LOGGER",
                "lineBegin": 36,
                "lineEnd": 36
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "AuthenticationManager",
                "variable": "authenticationManager",
                "lineBegin": 38,
                "lineEnd": 38
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "UserRepository",
                "variable": "userRepository",
                "lineBegin": 40,
                "lineEnd": 40
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "RoleRepository",
                "variable": "roleRepository",
                "lineBegin": 41,
                "lineEnd": 41
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "MailService",
                "variable": "mailService",
                "lineBegin": 42,
                "lineEnd": 42
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "PasswordEncoder",
                "variable": "encoder",
                "lineBegin": 44,
                "lineEnd": 44
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "JwtProvider",
                "variable": "jwtProvider",
                "lineBegin": 45,
                "lineEnd": 45
            }
        ],
        "methods": {
            "authenticateUser": {
                "name": "authenticateUser",
                "lineBegin": 48,
                "lineEnd": 68,
                "annotations": [
                    "@PostMapping(\"/login\")"
                ],
                "returnDataType": [
                    "ResponseEntity<?>"
                ],
                "identifier": [
                    "ResponseEntity",
                    "?"
                ],
                "parametersDataType": [
                    {
                        "type": "LoginForm",
                        "variable": "loginForm",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Authentication",
                        "variable": "authentication",
                        "qualifedType": ""
                    },
                    {
                        "type": "String",
                        "variable": "jwt",
                        "qualifedType": ""
                    },
                    {
                        "type": "UserDetails",
                        "variable": "userDetails",
                        "qualifedType": ""
                    },
                    {
                        "type": "UserDetails",
                        "variable": "principal",
                        "qualifedType": ""
                    },
                    {
                        "type": "Optional<User>",
                        "variable": "user",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    }
                ],
                "body": "{\n    Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(loginForm.getMail(), loginForm.getPassword()));\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    String jwt = jwtProvider.generateJwtToken(authentication);\n    UserDetails userDetails = (UserDetails) authentication.getPrincipal();\n    UserDetails principal = (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n    LOGGER.info(\"Logged user: \" + principal.getUsername() + \". Authorities: \" + principal.getAuthorities().toString());\n    Optional<User> user = userRepository.findByMail(principal.getUsername());\n    if (user.isPresent()) {\n        return ResponseEntity.ok(new JwtResponse(jwt, user.get()));\n    } else {\n        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Invalid login data.\");\n    }\n}",
                "methodInvocations": [
                    {
                        "scopeName": "loginForm",
                        "methodName": "getMail",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.form.LoginForm"
                    },
                    {
                        "scopeName": "loginForm",
                        "methodName": "getPassword",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.form.LoginForm"
                    },
                    {
                        "scopeName": "jwtProvider",
                        "methodName": "generateJwtToken",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.security.jwt.JwtProvider"
                    },
                    {
                        "scopeName": "authentication",
                        "methodName": "getPrincipal",
                        "targetClassName": ""
                    },
                    {
                        "scopeName": "principal",
                        "methodName": "getUsername",
                        "targetClassName": ""
                    },
                    {
                        "scopeName": "principal",
                        "methodName": "getAuthorities",
                        "targetClassName": ""
                    },
                    {
                        "scopeName": "principal.getAuthorities()",
                        "methodName": "toString",
                        "targetClassName": ""
                    },
                    {
                        "scopeName": "principal",
                        "methodName": "getUsername",
                        "targetClassName": ""
                    },
                    {
                        "scopeName": "userRepository",
                        "methodName": "findByMail",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
                    },
                    {
                        "scopeName": "user",
                        "methodName": "isPresent",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "user",
                        "methodName": "get",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    }
                ]
            },
            "createUser": {
                "name": "createUser",
                "lineBegin": 71,
                "lineEnd": 94,
                "annotations": [
                    "@PostMapping(\"/register\")"
                ],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "SignUpForm",
                        "variable": "signUpForm",
                        "qualifedType": ""
                    }
                ],
                "variables": [
                    {
                        "type": "Set<Role>",
                        "variable": "roles",
                        "qualifedType": "pl.edu.wat.wcy.pz.restaurantServer.entity.Role"
                    },
                    {
                        "type": "Role",
                        "variable": "role",
                        "qualifedType": ""
                    },
                    {
                        "type": "User",
                        "variable": "user",
                        "qualifedType": ""
                    }
                ],
                "body": "{\n    if (userRepository.existsByMail(signUpForm.getMail())) {\n        throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"User with this email already exists.\");\n    }\n    Set<Role> roles = new HashSet<>();\n    signUpForm.getRoles().forEach(roleName -> {\n        if (roleName.equalsIgnoreCase(roleName)) {\n            Role role = roleRepository.findByRoleName(roleName).orElseThrow(() -> new ResponseStatusException(HttpStatus.FORBIDDEN, \"Role not found: \" + roleName));\n            roles.add(role);\n        }\n    });\n    User user = new User(signUpForm.getMail(), signUpForm.getFirstName(), signUpForm.getLastName(), encoder.encode(signUpForm.getPassword()), roles);\n    userRepository.save(user);\n    mailService.sendEmail(user.getMail(), \"Welcome to Restaurant!\", \"Hello \" + user.getFirstName() + \", thanks for using our system!\");\n    throw new ResponseStatusException(HttpStatus.CREATED, \"Registration successful\");\n}",
                "methodInvocations": [
                    {
                        "scopeName": "signUpForm",
                        "methodName": "getMail",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.form.SignUpForm"
                    },
                    {
                        "scopeName": "userRepository",
                        "methodName": "existsByMail",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
                    },
                    {
                        "scopeName": "roleRepository",
                        "methodName": "findByRoleName",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RoleRepository"
                    },
                    {
                        "scopeName": "roles",
                        "methodName": "add",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.Role"
                    },
                    {
                        "scopeName": "signUpForm",
                        "methodName": "getRoles",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.form.SignUpForm"
                    },
                    {
                        "scopeName": "signUpForm.getRoles()",
                        "methodName": "forEach",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.form.SignUpForm"
                    },
                    {
                        "scopeName": "signUpForm",
                        "methodName": "getMail",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.form.SignUpForm"
                    },
                    {
                        "scopeName": "signUpForm",
                        "methodName": "getFirstName",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.form.SignUpForm"
                    },
                    {
                        "scopeName": "signUpForm",
                        "methodName": "getLastName",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.form.SignUpForm"
                    },
                    {
                        "scopeName": "signUpForm",
                        "methodName": "getPassword",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.form.SignUpForm"
                    },
                    {
                        "scopeName": "userRepository",
                        "methodName": "save",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
                    },
                    {
                        "scopeName": "user",
                        "methodName": "getMail",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "user",
                        "methodName": "getFirstName",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
                    },
                    {
                        "scopeName": "mailService",
                        "methodName": "sendEmail",
                        "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.email.MailService"
                    }
                ]
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.AllArgsConstructor",
            "org.slf4j.Logger",
            "org.slf4j.LoggerFactory",
            "org.springframework.http.HttpStatus",
            "org.springframework.http.ResponseEntity",
            "org.springframework.security.authentication.AuthenticationManager",
            "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.context.SecurityContextHolder",
            "org.springframework.security.core.userdetails.UserDetails",
            "org.springframework.security.crypto.password.PasswordEncoder",
            "org.springframework.web.bind.annotation",
            "org.springframework.web.server.ResponseStatusException",
            "pl.edu.wat.wcy.pz.restaurantServer.email.MailService",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Role",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.User",
            "pl.edu.wat.wcy.pz.restaurantServer.form.LoginForm",
            "pl.edu.wat.wcy.pz.restaurantServer.form.SignUpForm",
            "pl.edu.wat.wcy.pz.restaurantServer.form.response.JwtResponse",
            "pl.edu.wat.wcy.pz.restaurantServer.repository.RoleRepository",
            "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository",
            "pl.edu.wat.wcy.pz.restaurantServer.security.jwt.JwtProvider",
            "java.util.HashSet",
            "java.util.Optional",
            "java.util.Set"
        ],
        "methodsInvocations": [
            {
                "scopeName": "loginForm",
                "methodName": "getMail",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.form.LoginForm"
            },
            {
                "scopeName": "loginForm",
                "methodName": "getPassword",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.form.LoginForm"
            },
            {
                "scopeName": "jwtProvider",
                "methodName": "generateJwtToken",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.security.jwt.JwtProvider"
            },
            {
                "scopeName": "userRepository",
                "methodName": "findByMail",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
            },
            {
                "scopeName": "signUpForm",
                "methodName": "getMail",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.form.SignUpForm"
            },
            {
                "scopeName": "userRepository",
                "methodName": "existsByMail",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
            },
            {
                "scopeName": "roleRepository",
                "methodName": "findByRoleName",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.RoleRepository"
            },
            {
                "scopeName": "signUpForm",
                "methodName": "getRoles",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.form.SignUpForm"
            },
            {
                "scopeName": "signUpForm.getRoles()",
                "methodName": "forEach",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.form.SignUpForm"
            },
            {
                "scopeName": "signUpForm",
                "methodName": "getMail",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.form.SignUpForm"
            },
            {
                "scopeName": "signUpForm",
                "methodName": "getFirstName",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.form.SignUpForm"
            },
            {
                "scopeName": "signUpForm",
                "methodName": "getLastName",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.form.SignUpForm"
            },
            {
                "scopeName": "signUpForm",
                "methodName": "getPassword",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.form.SignUpForm"
            },
            {
                "scopeName": "userRepository",
                "methodName": "save",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.repository.UserRepository"
            },
            {
                "scopeName": "user",
                "methodName": "getMail",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "user",
                "methodName": "getFirstName",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.entity.User"
            },
            {
                "scopeName": "mailService",
                "methodName": "sendEmail",
                "targetClassName": "pl.edu.wat.wcy.pz.restaurantServer.email.MailService"
            }
        ],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "authenticateUser",
                "annotations": [
                    "@PostMapping(\"/login\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "ResponseEntity<?>",
                "parameters": [
                    {
                        "type": "LoginForm",
                        "variable": "loginForm",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(loginForm.getMail(), loginForm.getPassword()));",
                    "    SecurityContextHolder.getContext().setAuthentication(authentication);",
                    "    String jwt = jwtProvider.generateJwtToken(authentication);",
                    "    UserDetails userDetails = (UserDetails) authentication.getPrincipal();",
                    "    UserDetails principal = (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();",
                    "    LOGGER.info(\"Logged user: \" + principal.getUsername() + \". Authorities: \" + principal.getAuthorities().toString());",
                    "    Optional<User> user = userRepository.findByMail(principal.getUsername());",
                    "    if (user.isPresent()) {",
                    "        return ResponseEntity.ok(new JwtResponse(jwt, user.get()));",
                    "    } else {",
                    "        throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Invalid login data.\");",
                    "    }",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "createUser",
                "annotations": [
                    "@PostMapping(\"/register\")"
                ],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "SignUpForm",
                        "variable": "signUpForm",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    if (userRepository.existsByMail(signUpForm.getMail())) {",
                    "        throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"User with this email already exists.\");",
                    "    }",
                    "    Set<Role> roles = new HashSet<>();",
                    "    signUpForm.getRoles().forEach(roleName -> {",
                    "        if (roleName.equalsIgnoreCase(roleName)) {",
                    "            Role role = roleRepository.findByRoleName(roleName).orElseThrow(() -> new ResponseStatusException(HttpStatus.FORBIDDEN, \"Role not found: \" + roleName));",
                    "            roles.add(role);",
                    "        }",
                    "    });",
                    "    User user = new User(signUpForm.getMail(), signUpForm.getFirstName(), signUpForm.getLastName(), encoder.encode(signUpForm.getPassword()), roles);",
                    "    userRepository.save(user);",
                    "    mailService.sendEmail(user.getMail(), \"Welcome to Restaurant!\", \"Hello \" + user.getFirstName() + \", thanks for using our system!\");",
                    "    throw new ResponseStatusException(HttpStatus.CREATED, \"Registration successful\");",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.entity.Role": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.entity.Role",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.entity",
        "begin": 1,
        "end": 40,
        "short_name": "Role",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.entity.Role",
        "annotations": [
            "@NoArgsConstructor",
            "@Entity"
        ],
        "dependencies": [],
        "instance_variables": [
            {
                "annotations": [
                    "@Id",
                    "@GeneratedValue(strategy = GenerationType.IDENTITY)",
                    "@Column(name = \"ROLE_ID\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "Long",
                "variable": "roleId",
                "lineBegin": 12,
                "lineEnd": 15
            },
            {
                "annotations": [
                    "@Column(name = \"ROLE_NAME\")"
                ],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "roleName",
                "lineBegin": 17,
                "lineEnd": 18
            }
        ],
        "methods": {
            "setRoleId": {
                "name": "setRoleId",
                "lineBegin": 29,
                "lineEnd": 31,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Long",
                        "variable": "roleId",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.roleId = roleId;\n}",
                "methodInvocations": []
            },
            "getRoleName": {
                "name": "getRoleName",
                "lineBegin": 33,
                "lineEnd": 35,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return roleName;\n}",
                "methodInvocations": []
            },
            "setRoleName": {
                "name": "setRoleName",
                "lineBegin": 37,
                "lineEnd": 39,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "roleName",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.roleName = roleName;\n}",
                "methodInvocations": []
            },
            "getRoleId": {
                "name": "getRoleId",
                "lineBegin": 25,
                "lineEnd": 27,
                "annotations": [],
                "returnDataType": [
                    "Long"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return roleId;\n}",
                "methodInvocations": []
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.AllArgsConstructor",
            "lombok.NoArgsConstructor",
            "javax.persistence"
        ],
        "methodsInvocations": [],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "setRoleId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Long",
                        "variable": "roleId",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.roleId = roleId;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getRoleName",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return roleName;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setRoleName",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "roleName",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.roleName = roleName;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getRoleId",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Long",
                "parameters": [],
                "body": [
                    "{",
                    "    return roleId;",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.repository.RoleRepository": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.repository.RoleRepository",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.repository",
        "begin": 1,
        "end": 11,
        "short_name": "RoleRepository",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.repository.RoleRepository",
        "annotations": [
            "@Repository"
        ],
        "dependencies": [],
        "instance_variables": [],
        "methods": {
            "findByRoleName": {
                "name": "findByRoleName",
                "lineBegin": 10,
                "lineEnd": 10,
                "annotations": [],
                "returnDataType": [
                    "Optional<Role>"
                ],
                "identifier": [
                    "Optional",
                    "Role"
                ],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "roleName",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "",
                "methodInvocations": []
            }
        },
        "implements": [],
        "extends": [
            "JpaRepository<Role, Long>"
        ],
        "imports": [
            "org.springframework.data.jpa.repository.JpaRepository",
            "org.springframework.stereotype.Repository",
            "pl.edu.wat.wcy.pz.restaurantServer.entity.Role",
            "java.util.Optional"
        ],
        "methodsInvocations": [],
        "isInterface": true,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "findByRoleName",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Optional<Role>",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "roleName",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    ""
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.form.LoginForm": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.form.LoginForm",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.form",
        "begin": 1,
        "end": 25,
        "short_name": "LoginForm",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.form.LoginForm",
        "annotations": [
            "@Getter"
        ],
        "dependencies": [],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "mail",
                "lineBegin": 7,
                "lineEnd": 7
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "password",
                "lineBegin": 8,
                "lineEnd": 8
            }
        ],
        "methods": {
            "setPassword": {
                "name": "setPassword",
                "lineBegin": 22,
                "lineEnd": 24,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "password",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.password = password;\n}",
                "methodInvocations": []
            },
            "getPassword": {
                "name": "getPassword",
                "lineBegin": 18,
                "lineEnd": 20,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return password;\n}",
                "methodInvocations": []
            },
            "setMail": {
                "name": "setMail",
                "lineBegin": 14,
                "lineEnd": 16,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "mail",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.mail = mail;\n}",
                "methodInvocations": []
            },
            "getMail": {
                "name": "getMail",
                "lineBegin": 10,
                "lineEnd": 12,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return mail;\n}",
                "methodInvocations": []
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.Getter"
        ],
        "methodsInvocations": [],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "setPassword",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "password",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.password = password;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getPassword",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return password;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setMail",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "mail",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.mail = mail;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getMail",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return mail;",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    },
    "pl.edu.wat.wcy.pz.restaurantServer.form.SignUpForm": {
        "full_name": "pl.edu.wat.wcy.pz.restaurantServer.form.SignUpForm",
        "constructor": [],
        "package": "pl.edu.wat.wcy.pz.restaurantServer.form",
        "begin": 1,
        "end": 56,
        "short_name": "SignUpForm",
        "src": "pl.edu.wat.wcy.pz.restaurantServer.form.SignUpForm",
        "annotations": [
            "@Getter",
            "@Setter"
        ],
        "dependencies": [],
        "instance_variables": [
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "mail",
                "lineBegin": 11,
                "lineEnd": 11
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "firstName",
                "lineBegin": 12,
                "lineEnd": 12
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "lastName",
                "lineBegin": 13,
                "lineEnd": 13
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [
                    "Set",
                    "String"
                ],
                "type": "Set<String>",
                "variable": "roles",
                "lineBegin": 14,
                "lineEnd": 14
            },
            {
                "annotations": [],
                "modifier": "private ",
                "identifier": [],
                "type": "String",
                "variable": "password",
                "lineBegin": 15,
                "lineEnd": 15
            }
        ],
        "methods": {
            "setLastName": {
                "name": "setLastName",
                "lineBegin": 37,
                "lineEnd": 39,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "lastName",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.lastName = lastName;\n}",
                "methodInvocations": []
            },
            "setPassword": {
                "name": "setPassword",
                "lineBegin": 53,
                "lineEnd": 55,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "password",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.password = password;\n}",
                "methodInvocations": []
            },
            "getPassword": {
                "name": "getPassword",
                "lineBegin": 49,
                "lineEnd": 51,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return password;\n}",
                "methodInvocations": []
            },
            "setMail": {
                "name": "setMail",
                "lineBegin": 21,
                "lineEnd": 23,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "mail",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.mail = mail;\n}",
                "methodInvocations": []
            },
            "setFirstName": {
                "name": "setFirstName",
                "lineBegin": 29,
                "lineEnd": 31,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "String",
                        "variable": "firstName",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.firstName = firstName;\n}",
                "methodInvocations": []
            },
            "getFirstName": {
                "name": "getFirstName",
                "lineBegin": 25,
                "lineEnd": 27,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return firstName;\n}",
                "methodInvocations": []
            },
            "getLastName": {
                "name": "getLastName",
                "lineBegin": 33,
                "lineEnd": 35,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return lastName;\n}",
                "methodInvocations": []
            },
            "setRoles": {
                "name": "setRoles",
                "lineBegin": 45,
                "lineEnd": 47,
                "annotations": [],
                "returnDataType": [
                    "void"
                ],
                "identifier": [],
                "parametersDataType": [
                    {
                        "type": "Set<String>",
                        "variable": "roles",
                        "qualifedType": ""
                    }
                ],
                "variables": [],
                "body": "{\n    this.roles = roles;\n}",
                "methodInvocations": []
            },
            "getMail": {
                "name": "getMail",
                "lineBegin": 17,
                "lineEnd": 19,
                "annotations": [],
                "returnDataType": [
                    "String"
                ],
                "identifier": [],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return mail;\n}",
                "methodInvocations": []
            },
            "getRoles": {
                "name": "getRoles",
                "lineBegin": 41,
                "lineEnd": 43,
                "annotations": [],
                "returnDataType": [
                    "Set<String>"
                ],
                "identifier": [
                    "Set",
                    "String"
                ],
                "parametersDataType": [],
                "variables": [],
                "body": "{\n    return roles;\n}",
                "methodInvocations": []
            }
        },
        "implements": [],
        "extends": [],
        "imports": [
            "lombok.Getter",
            "lombok.Setter",
            "java.util.Set"
        ],
        "methodsInvocations": [],
        "isInterface": false,
        "myInterfaces": [],
        "myMethods": [
            {
                "name": "setLastName",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "lastName",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.lastName = lastName;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setPassword",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "password",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.password = password;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getPassword",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return password;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setMail",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "mail",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.mail = mail;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setFirstName",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "String",
                        "variable": "firstName",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.firstName = firstName;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getFirstName",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return firstName;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getLastName",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return lastName;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "setRoles",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "void",
                "parameters": [
                    {
                        "type": "Set<String>",
                        "variable": "roles",
                        "qualifedType": ""
                    }
                ],
                "body": [
                    "{",
                    "    this.roles = roles;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getMail",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "String",
                "parameters": [],
                "body": [
                    "{",
                    "    return mail;",
                    "}"
                ],
                "exceptions": []
            },
            {
                "name": "getRoles",
                "annotations": [],
                "route": "",
                "modifier": "public",
                "returnType": "Set<String>",
                "parameters": [],
                "body": [
                    "{",
                    "    return roles;",
                    "}"
                ],
                "exceptions": []
            }
        ],
        "classGlue": [],
        "classDrag": [],
        "isOriginal": true
    }
}